<?xml version="1.0" encoding="utf-8" ?>
<!--
 Copyright 2021 Max Toro Q.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->
<module version='1.0' language='C#'
   xmlns='http://maxtoroq.github.io/XCST'
   xmlns:code='https://maxtoroq.github.io/XCST/code'>

   <import-namespace ns='System.Linq'/>
   <import-namespace ns='System.Xml.Linq'/>

   <import href='_type_reference_equal.xcst'/>

   <function name='src_item_to_sequence_type' as='XElement'>
      <param name='type' as='XElement'/>

      <assert test='type.Name == code + "type-reference"'/>

      <return>
         <code:type-reference array-dimensions='1'>
            <copy-of value='type'/>
         </code:type-reference>
      </return>
   </function>

   <function name='src_non_nullable_type' as='XElement'>
      <param name='type' as='XElement'/>
      <param name='language' as='string'/>

      <assert test='type.Name == code + "type-reference"'/>

      <choose>
         <when test='type.Attribute("nullable") is XAttribute nullableAttr'>
            <choose>
               <when test='xs_boolean(nullableAttr)'>
                  <return>
                     <code:type-reference nullable='false'>
                        <copy-of value='attributes(type)
                           .Where(p => p.Name != "nullable")'/>
                        <copy-of value='type.Elements()'/>
                     </code:type-reference>
                  </return>
               </when>
               <otherwise>
                  <return value='type'/>
               </otherwise>
            </choose>
         </when>
         <when test='type.Attribute("name") is XAttribute nameAttr'>
            <variable name='nonNullable' value='xcst_non_nullable_type(nameAttr.Value, language)'/>
            <return>
               <code:type-reference name='{nonNullable}'>
                  <copy-of value='attributes(type)
                     .Where(p => p.Name != "name")'/>
                  <copy-of value='type.Elements()'/>
               </code:type-reference>
            </return>
         </when>
         <otherwise>
            <return value='type'/>
         </otherwise>
      </choose>
   </function>

   <function name='src_is_nullable_type' as='bool'>
      <param name='type' as='XElement'/>
      <param name='language' as='string'/>

      <assert test='type.Name == code + "type-reference"'/>

      <choose>
         <when test='type.Attribute("nullable") is XAttribute nullableAttr'>
            <return value='xs_boolean(nullableAttr)'/>
         </when>
         <when test='type.Attribute("name") is XAttribute nameAttr'>
            <variable name='nonNullable' value='xcst_non_nullable_type(nameAttr.Value, language)'/>
            <return value='nonNullable != nameAttr.Value'/>
         </when>
         <otherwise>
            <return value='false'/>
         </otherwise>
      </choose>
   </function>

   <function name='src_qualified_type' as='bool'>
      <param name='type' as='XElement'/>

      <assert test='type.Name == code + "type-reference"'/>

      <choose>
         <when test='type.Attribute("array-dimensions") != null'>
            <return value='src_qualified_type(type.Element(code + "type-reference")!)'/>
         </when>
         <otherwise>
            <choose>
               <when test='type.Attribute("namespace") != null'>
                  <return value='select(type, code + "type-arguments", code + "type-reference")
                     .All(p => src_qualified_type(p))'/>
               </when>
               <otherwise>
                  <return value='type.Element(code + "type-reference") is XElement nestedType
                     &amp;&amp; src_qualified_type(nestedType)'/>
               </otherwise>
            </choose>
         </otherwise>
      </choose>
   </function>

   <function name='src_sequence_to_item_type' as='XElement'>
      <param name='type' as='XElement'/>
      <param name='language' as='string'/>

      <assert test='type.Name == code + "type-reference"'/>

      <choose>
         <when test='type.Attribute("array-dimensions") != null'>
            <return value='type.Element(code + "type-reference")!'/>
         </when>
         <otherwise>
            <return>
               <code:type-reference name='{xcst_item_type(type.Attribute("name")!.Value, language)}'>
                  <copy-of value='attributes(type)
                     .Where(p => p.Name != "name")'/>
                  <copy-of value='type.Elements()'/>
               </code:type-reference>
            </return>
         </otherwise>
      </choose>
   </function>

   <function name='src_type_cardinality' as='TypeCardinality'>
      <param name='type' as='XElement'/>
      <param name='language' as='string'/>

      <assert test='type.Name == code + "type-reference"'/>

      <return value='
         (type.Attribute("array-dimensions") != null) ?
            TypeCardinality.ZeroOrMore
            : xcst_cardinality(type.Attribute("name")!.Value, language)'/>
   </function>

</module>
