<?xml version="1.0" encoding="utf-8" ?>
<!--
 Copyright 2021 Max Toro Q.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->
<module version='1.0' language='C#'
   xmlns='http://maxtoroq.github.io/XCST'
   xmlns:xcst='https://maxtoroq.github.io/XCST/grammar'
   xmlns:code='https://maxtoroq.github.io/XCST/code'
   xmlns:src='https://maxtoroq.github.io/XCST/compiled'>

   <import-namespace ns='System.Linq'/>
   <import-namespace ns='System.Xml.Linq'/>

   <template match='XElement el &amp;&amp; el.Name == c + "assert"' mode='src:statement'>

      <call-template name='xcst:validate-attribs'>
         <with-param name='el' value='el'/>
         <with-param name='required' value='new[] { "test" }'/>
         <with-param name='optional' value='new[] { "value" }'/>
      </call-template>

      <call-template name='xcst:value-or-sequence-constructor'>
         <with-param name='el' value='el'/>
      </call-template>

      <variable name='text' value='xcst_text(el)'/>

      <code:method-call name='Assert'>
         <call-template name='src:line-number'>
            <with-param name='el' value='el'/>
         </call-template>
         <code:type-reference name='Debug' namespace='System.Diagnostics'/>
         <code:arguments>
            <code:expression value='{xcst_expression(el.Attribute("test")!)}'/>
            <if test='xcst_has_value(el, text)'>
               <call-template name='src:simple-content'>
                  <with-param name='el' value='el'/>
                  <with-param name='attr' value='el.Attribute("value")'/>
                  <with-param name='text' value='text'/>
               </call-template>
            </if>
         </code:arguments>
      </code:method-call>
   </template>

   <template match='XElement el &amp;&amp; el.Name == c + "assert"' mode='xcst:instruction'>
      <xcst:instruction void='true'/>
   </template>

   <template match='XElement el &amp;&amp; el.Name == c + "message"' mode='src:statement'>

      <call-template name='xcst:validate-attribs'>
         <with-param name='el' value='el'/>
         <with-param name='optional' value='new[] { "terminate", "value", "error-code", "error-data" }'/>
      </call-template>

      <call-template name='xcst:value-or-sequence-constructor'>
         <with-param name='el' value='el'/>
      </call-template>

      <variable name='terminateAttr' value='el.Attribute("terminate")'/>
      <variable name='terminate' value='
         (terminateAttr != null) ?
            xcst_boolean(terminateAttr, true)
            : null'/>

      <variable name='messageVar' value='src_aux_variable("message_" + fn_generate_id(el))'/>

      <code:variable name='{messageVar}'>
         <call-template name='src:line-number'>
            <with-param name='el' value='el'/>
         </call-template>
         <code:new-object>
            <code:type-reference name='MessageArgs' namespace='Xcst'/>
            <code:arguments>
               <call-template name='src:simple-content'>
                  <with-param name='el' value='el'/>
                  <with-param name='attr' value='el.Attribute("value")'/>
               </call-template>
            </code:arguments>
            <code:initializer>
               <if test='el.Attribute("error-code") is { } errorCodeAttr'>
                  <code:member-initializer name='ErrorCode'>
                     <call-template name='src:line-number'>
                        <with-param name='el' value='el'/>
                     </call-template>
                     <call-template name='src:QName'>
                        <with-param name='qname' value='xcst_EQName(errorCodeAttr, null, false, true)'/>
                        <with-param name='avt' value='errorCodeAttr'/>
                     </call-template>
                  </code:member-initializer>
               </if>
               <if test='el.Attribute("error-data") is { } errorDataAttr'>
                  <code:member-initializer name='ErrorData'>
                     <call-template name='src:line-number'>
                        <with-param name='el' value='el'/>
                     </call-template>
                     <code:expression value='{xcst_expression(errorDataAttr)}'/>
                  </code:member-initializer>
               </if>
               <if test='terminate == true
                     || terminateAttr != null'>
                  <code:member-initializer name='Terminate'>
                     <choose>
                        <when test='terminate == true'>
                           <code:bool value='true'/>
                        </when>
                        <otherwise>
                           <call-template name='src:line-number'>
                              <with-param name='el' value='el'/>
                           </call-template>
                           <call-template name='src:boolean'>
                              <with-param name='val' value='terminate'/>
                              <with-param name='avt' value='terminateAttr'/>
                           </call-template>
                        </otherwise>
                     </choose>
                  </code:member-initializer>
               </if>
            </code:initializer>
         </code:new-object>
      </code:variable>

      <code:method-call name='LogMessage' line-hidden='true'>
         <copy-of value='select(src_context_field, src + "reference", code)'/>
         <code:arguments>
            <code:variable-reference name='{messageVar}'/>
         </code:arguments>
      </code:method-call>

      <variable name='throwExpr'>
         <code:throw>
            <call-template name='src:line-number'>
               <with-param name='el' value='el'/>
            </call-template>
            <code:method-call name='Terminate'>
               <copy-of value='src_helper_type("DynamicError")'/>
               <code:arguments>
                  <code:variable-reference name='{messageVar}'/>
                  <code:string verbatim='true'>
                     <text expand-text='yes' transform-text='trim'>
                        Processing terminated by c:{el.Name.LocalName} at line {LineNumber(el)} in {ModuleUri(el).Split('/').Last()}.
                     </text>
                  </code:string>
               </code:arguments>
            </code:method-call>
         </code:throw>
      </variable>

      <choose>
         <when test='terminate == true'>
            <copy-of value='throwExpr'/>
         </when>
         <when test='terminateAttr != null'>
            <code:if>
               <code:property-reference name='Terminate'>
                  <code:variable-reference name='{messageVar}'/>
               </code:property-reference>
               <code:block>
                  <copy-of value='throwExpr'/>
               </code:block>
            </code:if>
         </when>
      </choose>
   </template>

   <template match='XElement el &amp;&amp; el.Name == c + "message"' mode='xcst:instruction'>
      <xcst:instruction void='true'/>
   </template>

</module>
