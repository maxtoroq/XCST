<?xml version="1.0" encoding="utf-8" ?>
<!--
 Copyright 2021 Max Toro Q.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->
<module version='1.0' language='C#'
   xmlns='http://maxtoroq.github.io/XCST'
   xmlns:xcst='https://maxtoroq.github.io/XCST/grammar'
   xmlns:code='https://maxtoroq.github.io/XCST/code'
   xmlns:src='https://maxtoroq.github.io/XCST/compiled'>

   <import-namespace ns='System.Linq'/>
   <import-namespace ns='System.Xml.Linq'/>

   <template mode='xcst:validate-top-level' match='XElement el &amp;&amp; (el.Name == c + "param" || el.Name == c + "variable")'/>

   <template mode='xcst:package-manifest' match='XElement el &amp;&amp; (el.Name == c + "param" || el.Name == c + "variable")'>
      <param name='modules' as='XElement[]' tunnel='yes' required='yes'/>
      <param name='modulePos' as='int' tunnel='yes' required='yes'/>
      <param name='language' as='string' tunnel='yes' required='yes'/>

      <variable name='param' value='el.Name == c + "param"'/>

      <call-template name='xcst:validate-attribs'>
         <with-param name='el' value='el'/>
         <with-param name='required' value='new[] { "name" }'/>
         <with-param name='optional' value='new[] { "value", "as" }
            .Concat((param) ?
               new[] { "required", "tunnel" }
               : new[] { "visibility" })
            .ToArray()'/>
      </call-template>

      <call-template name='xcst:value-or-sequence-constructor'>
         <with-param name='el' value='el'/>
      </call-template>

      <variable name='text' value='xcst_text(el)'/>
      <variable name='hasDefaultValue' value='xcst_has_value(el, text)'/>
      <variable name='required' value='
         (param &amp;&amp; el.Attribute("required") is XAttribute reqAttr) ?
            xcst_boolean(reqAttr)!.Value
            : false'/>

      <if test='param'>
         <if test='el.Attribute("tunnel") is XAttribute tunnelAttr
               &amp;&amp; xcst_boolean(tunnelAttr)!.Value'>
            <message terminate='yes' error-code='XTSE0020' error-data='src_error_object(el)' transform-text='trim'>
               For attribute 'tunnel' within a package parameter, the only permitted values are: 'no', 'false', '0'.
            </message>
         </if>
         <if test='!(!hasDefaultValue || !required)'>
            <message terminate='yes' error-code='XTSE0010' error-data='src_error_object(el)' transform-text='trim'>
               The 'value' attribute or child element/text should be omitted when required='yes'.
            </message>
         </if>
      </if>

      <variable name='nameExpr' value='xcst_name(el.Attribute("name")!)'/>
      <variable name='name' value='xcst_unescape_identifier(nameExpr, language)'/>
      <variable name='nameWasEscaped' value='nameExpr != name'/>

      <variable name='declaredVisibility' value='
         (param) ? "public"
         : (el.Attribute("visibility") is XAttribute visibilityAttr) ? xcst_visibility(visibilityAttr)
         : "private"'/>

      <if test='!(!hasDefaultValue || declaredVisibility != "abstract")'>
         <message terminate='yes' error-code='XTSE0010' error-data='src_error_object(el)' transform-text='trim'>
            The 'value' attribute or child element/text should be omitted when visibility='abstract'.
         </message>
      </if>

      <call-template name='xcst:validate-hidden'>
         <with-param name='el' value='el'/>
         <with-param name='visibility' value='declaredVisibility'/>
      </call-template>

      <variable name='effectiveVisibility' as='string'>
         <variable name='followingModules' value='modules.Skip(modulePos + 1).ToArray()'/>
         <choose>
            <when test='declaredVisibility == "hidden"'>hidden</when>
            <when test='el.Parent!.Name == c + "override"'>
               <variable name='usePackageEls' value='select(followingModules, c + "use-package")
                  .Where(p => xcst_name_equal(p.Attribute("name"), el.Parent.Parent!.Attribute("name")))
                  .ToArray()'/>
               <variable name='hidingComponents' value='select(usePackageEls, c + "override", c)
                  .Where(p => xcst_homonymous(p, el))'/>
               <choose>
                  <when test='hidingComponents.Any()'>hidden</when>
                  <otherwise value='declaredVisibility'/>
               </choose>
            </when>
            <when test='select(followingModules, c)
               .Any(p => xcst_homonymous(p, el))'>hidden</when>
            <otherwise value='declaredVisibility'/>
         </choose>
      </variable>

      <call-template name='xcst:check-duplicate-component'>
         <with-param name='el' value='el'/>
         <with-param name='effectiveVisibility' value='effectiveVisibility'/>
      </call-template>

      <variable name='overriddenMeta'>
         <call-template name='xcst:overridden-component'>
            <with-param name='el' value='el'/>
         </call-template>
      </variable>

      <variable name='memberName' value='
         (effectiveVisibility == "hidden") ?
            src_aux_variable($"var_{name}_{fn_generate_id(el)}")
            : name'/>

      <element name='xcst:{el.Name.LocalName}' namespace='{xcst}'>
         <attribute name='name' value='name'/>
         <attribute name='has-default-value' value='fn_string(hasDefaultValue)'/>
         <if test='param'>
            <attribute name='required' value='fn_string(required)'/>
         </if>
         <attribute name='visibility' value='effectiveVisibility'/>
         <attribute name='member-name' value='memberName'/>
         <if test='name == memberName'>
            <attribute name='member-name-was-escaped' value='fn_string(nameWasEscaped)'/>
         </if>
         <if test='overriddenMeta != null'>
            <attribute name='overrides' value='fn_generate_id(overriddenMeta)'/>
            <attribute name='overriding' value='fn_string(effectiveVisibility != "hidden" || declaredVisibility == "hidden")'/>
         </if>
         <attribute name='declaration-id' value='fn_generate_id(el)'/>
         <attribute name='declaring-module-uri' value='el.Document!.BaseUri'/>
         <if test='ReferenceEquals(this, this)'>
            <call-template name='xcst:variable-type'>
               <with-param name='el' value='el'/>
               <with-param name='text' value='text'/>
            </call-template>
            <on-empty>
               <copy-of value='src_nullable_object_type'/>
            </on-empty>
         </if>
      </element>
   </template>


   <!-- ## Library Package -->

   <template mode='src:member' match='XElement el &amp;&amp; (el.Name == xcst + "param" || el.Name == xcst + "variable")'>

      <variable name='param' value='el.Name == xcst + "param"'/>
      <variable name='visibilityAttr' value='el.Attribute("visibility")!'/>
      <variable name='publicMember' value='visibilityAttr.Value != "private"'/>
      <variable name='required' value='(param) ? xs_boolean(el.Attribute("required")!) : false'/>
      <variable name='typeRef' value='el.Element(code + "type-reference")!'/>

      <variable name='usedPkgField'>
         <code:field-reference name='{el.Attribute("member-name")!.Value}' verbatim='true'>
            <code:field-reference name='{src_lib_field_name(el)}'>
               <code:this-reference/>
            </code:field-reference>
         </code:field-reference>
      </variable>

      <variable name='useInitField' value='required'/>

      <variable name='initField'>
         <code:field-reference name='{src_init_field(el)}'>
            <code:this-reference/>
         </code:field-reference>
      </variable>

      <if test='useInitField'>
         <code:field name='{initField.Attribute("name")!.Value}' line-hidden='true'>
            <code:type-reference name='Boolean' namespace='System'/>
            <code:attributes>
               <call-template name='src:editor-browsable-never'/>
            </code:attributes>
         </code:field>
      </if>

      <code:property name='{el.Attribute("member-name")!.Value}'
            visibility='{(publicMember ? "public" : "private")}'
            extensibility='{(visibilityAttr.Value == "public" ? "virtual" : "#default")}'
            verbatim='true'>
         <if test='src_qualified_type(typeRef)'>
            <attribute name='return-type-verbatim' value='fn_string(true)'/>
         </if>
         <copy-of value='typeRef'/>
         <code:attributes>
            <if test='publicMember'>
               <code:attribute>
                  <copy-of value='src_component_attr_type'/>
                  <code:arguments>
                     <code:int value='{(param ? 5 : 4)}'/>
                  </code:arguments>
               </code:attribute>
               <if test='param
                     &amp;&amp; el.Attribute("required") is XAttribute requiredAttr
                     &amp;&amp; xs_boolean(requiredAttr)'>
                  <code:attribute>
                     <copy-of value='src_package_model_type("Required")'/>
                  </code:attribute>
               </if>
            </if>
         </code:attributes>
         <code:getter>
            <code:block>
               <code:return>
                  <copy-of value='usedPkgField'/>
               </code:return>
            </code:block>
         </code:getter>
         <code:setter>
            <code:block>
               <code:assign>
                  <copy-of value='usedPkgField'/>
                  <code:setter-value/>
               </code:assign>
               <if test='useInitField'>
                  <code:assign>
                     <copy-of value='initField'/>
                     <code:bool value='true'/>
                  </code:assign>
               </if>
            </code:block>
         </code:setter>
      </code:property>
   </template>

   <template mode='src:lib-overriding-type' match='XElement el &amp;&amp; (el.Name == xcst + "param" || el.Name == xcst + "variable")'>
      <code:type-reference name='Tuple' namespace='System'>
         <code:type-arguments>
            <code:type-reference name='Func' namespace='System'>
               <code:type-arguments>
                  <copy-of value='el.Element(code + "type-reference")'/>
               </code:type-arguments>
            </code:type-reference>
            <code:type-reference name='Action' namespace='System'>
               <code:type-arguments>
                  <copy-of value='el.Element(code + "type-reference")'/>
               </code:type-arguments>
            </code:type-reference>
         </code:type-arguments>
      </code:type-reference>
   </template>

   <template mode='src:lib-override' match='XElement el &amp;&amp; (el.Name == xcst + "param" || el.Name == xcst + "variable")'>

      <variable name='field'>
         <code:field-reference name='{src_overriding_field_name(el)}'>
            <code:this-reference/>
         </code:field-reference>
      </variable>

      <code:property name='{el.Attribute("member-name")!.Value}' visibility='public' extensibility='override'>
         <copy-of value='el.Element(code + "type-reference")'/>
         <code:getter>
            <code:block>
               <code:return>
                  <code:method-call name='Invoke'>
                     <code:property-reference name='Item1'>
                        <copy-of value='field'/>
                     </code:property-reference>
                  </code:method-call>
               </code:return>
            </code:block>
         </code:getter>
         <code:setter>
            <code:block>
               <code:method-call name='Invoke'>
                  <code:property-reference name='Item2'>
                     <copy-of value='field'/>
                  </code:property-reference>
                  <code:arguments>
                     <code:setter-value/>
                  </code:arguments>
               </code:method-call>
            </code:block>
         </code:setter>
      </code:property>
   </template>

   <template mode='src:lib-original' match='XElement el &amp;&amp; (el.Name == xcst + "param" || el.Name == xcst + "variable")'>
      <if test='el.Name == xcst + "variable"
            || !xs_boolean(el.Attribute("required")!)'>
         <code:method name='{src_original_member_name(el)}' visibility='internal'>
            <code:type-reference name='Func' namespace='System'>
               <code:type-arguments>
                  <copy-of value='el.Element(code + "type-reference")'/>
               </code:type-arguments>
            </code:type-reference>
            <code:block>
               <code:return>
                  <code:lambda>
                     <code:property-reference name='{el.Attribute("member-name")!.Value}'>
                        <code:base-reference/>
                     </code:property-reference>
                  </code:lambda>
               </code:return>
            </code:block>
         </code:method>
      </if>
   </template>

   <template mode='src:lib-tuple' match='XElement el &amp;&amp; (el.Name == xcst + "param" || el.Name == xcst + "variable")'>

      <variable name='getter' value='src_aux_variable("getter")'/>
      <variable name='setter' value='src_aux_variable("setter")'/>

      <code:method name='{src_tuple_member_name(el)}' visibility='internal' extensibility='static'>
         <apply-templates value='el' mode='src:lib-overriding-type'/>
         <code:parameters>
            <code:parameter name='{getter}'>
               <code:type-reference name='Func' namespace='System'>
                  <code:type-arguments>
                     <copy-of value='el.Element(code + "type-reference")'/>
                  </code:type-arguments>
               </code:type-reference>
            </code:parameter>
            <code:parameter name='{setter}'>
               <code:type-reference name='Action' namespace='System'>
                  <code:type-arguments>
                     <copy-of value='el.Element(code + "type-reference")'/>
                  </code:type-arguments>
               </code:type-reference>
            </code:parameter>
         </code:parameters>
         <code:block>
            <code:return>
               <code:method-call name='Create'>
                  <code:type-reference name='Tuple' namespace='System'/>
                  <code:arguments>
                     <code:variable-reference name='{getter}'/>
                     <code:variable-reference name='{setter}'/>
                  </code:arguments>
               </code:method-call>
            </code:return>
         </code:block>
      </code:method>
   </template>

   <function name='src_tuple_member_name' as='string'>
      <param name='meta' as='XElement'/>

      <return value='src_aux_variable("tuple_" + meta.Attribute("id")!.Value)'/>
   </function>


   <!-- ## Top Package -->

   <template mode='src:member' match='XElement el &amp;&amp; (el.Name == c + "param" || el.Name == c + "variable")'>
      <param name='packageManifest' as='XElement' tunnel='yes' required='yes'/>

      <variable name='param' value='el.Name == c + "param"'/>
      <variable name='id' value='fn_generate_id(el)'/>

      <variable name='meta' value='select(packageManifest, xcst)
         .First(p => p.Attribute("declaration-id")?.Value == id)'/>

      <variable name='visibility' value='meta.Attribute("visibility")!.Value'/>
      <variable name='required' value='(param) ? xs_boolean(meta.Attribute("required")!) : false'/>
      <variable name='publicMember' value='visibility is "public" or "final" or "abstract"'/>
      <variable name='verbatim' value='meta.Attribute("member-name-was-escaped") is XAttribute escAttr
         &amp;&amp; xs_boolean(escAttr)'/>

      <variable name='assign' value='(param) ? !required : xs_boolean(meta.Attribute("has-default-value")!)'/>
      <variable name='useBackingField' value='visibility != "abstract"'/>
      <variable name='useInitField' value='required || assign'/>

      <variable name='backingField' as='XElement'>
         <code:field-reference name='{(useBackingField ? src_backing_field(meta) : null)}'>
            <code:this-reference/>
         </code:field-reference>
      </variable>

      <variable name='initField'>
         <code:field-reference name='{(useInitField ? src_init_field(meta) : null)}'>
            <code:this-reference/>
         </code:field-reference>
      </variable>

      <if test='useBackingField'>
         <code:field name='{backingField.Attribute("name")!.Value}' line-hidden='true'>
            <copy-of value='meta.Element(code + "type-reference")'/>
            <code:attributes>
               <call-template name='src:editor-browsable-never'/>
            </code:attributes>
         </code:field>
      </if>

      <if test='useInitField'>
         <code:field name='{initField.Attribute("name")!.Value}' line-hidden='true'>
            <code:type-reference name='Boolean' namespace='System'/>
            <code:attributes>
               <call-template name='src:editor-browsable-never'/>
            </code:attributes>
         </code:field>
      </if>

      <code:property name='{meta.Attribute("member-name")!.Value}'
            visibility='{(publicMember ? "public" : "private")}'>
         <attribute name='extensibility'>
            <switch value='visibility'>
               <when test='"public"'>virtual</when>
               <when test='"abstract"'>abstract</when>
               <otherwise>#default</otherwise>
            </switch>
         </attribute>
         <if test='verbatim'>
            <attribute name='verbatim' value='fn_string(verbatim)'/>
         </if>
         <call-template name='src:line-number'>
            <with-param name='el' value='el'/>
         </call-template>
         <copy-of value='meta.Element(code + "type-reference")'/>
         <code:attributes>
            <if test='publicMember'>
               <code:attribute>
                  <copy-of value='src_component_attr_type'/>
                  <code:arguments>
                     <code:int value='{(param ? 5 : 4)}'/>
                  </code:arguments>
               </code:attribute>
               <if test='required'>
                  <code:attribute>
                     <copy-of value='src_package_model_type("Required")'/>
                  </code:attribute>
               </if>
            </if>
         </code:attributes>
         <choose>
            <when test='visibility == "abstract"'>
               <code:getter/>
               <code:setter/>
            </when>
            <otherwise>
               <code:getter>
                  <code:block>
                     <if test='assign'>
                        <code:if>
                           <code:not>
                              <copy-of value='initField'/>
                           </code:not>
                           <code:block>
                              <if test='meta.Attribute("overrides") is XAttribute overridesAttr'>
                                 <variable name='originalMeta' value='select(packageManifest, xcst)
                                    .First(p => p.Attribute("id")!.Value == overridesAttr.Value)'/>
                                 <variable name='originalRef' value='
                                    (originalMeta.Attribute("original-visibility")!.Value != "abstract"
                                       &amp;&amp; (originalMeta.Name == xcst + "variable"
                                          || !xs_boolean(originalMeta.Attribute("required")!))) ?
                                       src_original_member(originalMeta)
                                       : null'/>
                                 <code:variable name='{src_contextual_variable}'>
                                    <code:new-object>
                                       <code:initializer>
                                          <if test='originalRef != null'>
                                             <code:member-initializer name='original'>
                                                <code:method-call>
                                                   <copy-of value='originalRef'/>
                                                </code:method-call>
                                             </code:member-initializer>
                                          </if>
                                       </code:initializer>
                                    </code:new-object>
                                 </code:variable>
                              </if>
                              <code:assign>
                                 <call-template name='src:line-number'>
                                    <with-param name='el' value='el'/>
                                 </call-template>
                                 <copy-of value='backingField'/>
                                 <choose>
                                    <when test='param'>
                                       <call-template name='src:param-expression'>
                                          <with-param name='el' value='el'/>
                                          <with-param name='global' value='true'/>
                                          <with-param name='type' value='meta.Element(code + "type-reference")!'/>
                                          <with-param name='context' tunnel='yes'>
                                             <src:context>
                                                <copy-of value='src_helper_type("PrimingContext")'/>
                                                <src:reference>
                                                   <code:property-reference name='PrimingContext'>
                                                      <copy-of value='select(src_context_field, src + "reference", code)'/>
                                                   </code:property-reference>
                                                </src:reference>
                                             </src:context>
                                          </with-param>
                                       </call-template>
                                    </when>
                                    <otherwise>
                                       <call-template name='src:value'>
                                          <with-param name='el' value='el'/>
                                       </call-template>
                                    </otherwise>
                                 </choose>
                              </code:assign>
                              <code:assign>
                                 <copy-of value='initField'/>
                                 <code:bool value='true'/>
                              </code:assign>
                           </code:block>
                        </code:if>
                     </if>
                     <code:return>
                        <copy-of value='backingField'/>
                     </code:return>
                  </code:block>
               </code:getter>
               <code:setter>
                  <code:block>
                     <code:assign>
                        <copy-of value='backingField'/>
                        <code:setter-value/>
                     </code:assign>
                     <if test='useInitField'>
                        <code:assign>
                           <copy-of value='initField'/>
                           <code:bool value='true'/>
                        </code:assign>
                     </if>
                  </code:block>
               </code:setter>
            </otherwise>
         </choose>
      </code:property>
   </template>

   <template mode='src:lib-overriding-value' match='XElement el &amp;&amp; (el.Name == xcst + "param" || el.Name == xcst + "variable")'>
      <param name='meta' as='XElement' required='yes'/>

      <variable name='memberRef'>
         <code:property-reference name='{meta.Attribute("member-name")!.Value}'>
            <code:this-reference/>
         </code:property-reference>
      </variable>

      <code:method-call name='{src_tuple_member_name(el)}'>
         <code:type-reference name='{src_lib_class_name(el)}'/>
         <code:arguments>
            <code:lambda>
               <copy-of value='memberRef'/>
            </code:lambda>
            <variable name='param' value='src_aux_variable(fn_generate_id(el))'/>
            <code:lambda void='true'>
               <code:parameters>
                  <code:parameter name='{param}'/>
               </code:parameters>
               <code:assign>
                  <copy-of value='memberRef'/>
                  <code:variable-reference name='{param}'/>
               </code:assign>
            </code:lambda>
         </code:arguments>
      </code:method-call>
   </template>

   <function name='src_backing_field' as='string'>
      <param name='meta' as='XElement'/>

      <return value='src_aux_variable(
         (meta.Attribute("visibility")!.Value == "hidden") ?
            "backh_" + meta.Attribute("name")!.Value + "_" + meta.Attribute("declaration-id")!.Value
            : "back_" + meta.Attribute("name")!.Value
         )'/>
   </function>

   <function name='src_init_field' as='string'>
      <param name='meta' as='XElement'/>

      <return value='src_aux_variable(
         (meta.Attribute("visibility")!.Value == "hidden") ?
            "inith_" + meta.Attribute("name")!.Value + "_" + meta.Attribute("declaration-id")!.Value
            : "init_" + meta.Attribute("name")!.Value
         )'/>
   </function>

   <template name='src:prime-method'>
      <param name='packageManifest' as='XElement' tunnel='yes' required='yes'/>

      <variable name='context'>
         <src:context>
            <copy-of value='src_helper_type("PrimingContext")'/>
            <src:reference>
               <code:variable-reference name='{src_aux_variable("context")}'/>
            </src:reference>
         </src:context>
      </variable>

      <code:method name='Prime' visibility='private'>
         <code:implements-interface>
            <copy-of value='src_package_interface'/>
         </code:implements-interface>
         <code:parameters>
            <code:parameter name='{select(context, src + "reference", code).First().Attribute("name")!.Value}'>
               <copy-of value='context.Element(code + "type-reference")'/>
            </code:parameter>
         </code:parameters>
         <code:block>
            <for-each name='param' in='select(packageManifest, xcst + "param")
                  .Where(p => p.Attribute("visibility")!.Value != "hidden")'>
               <variable name='required' value='xs_boolean(param.Attribute("required")!)'/>
               <variable name='accepted' value='(bool?)param.Attribute("accepted") == true'/>
               <variable name='verbatim' value='param.Attribute("member-name-was-escaped") is XAttribute escAttr
                  &amp;&amp; xs_boolean(escAttr)'/>
               <choose>
                  <when test='required'>
                     <code:if>
                        <code:or-else>
                           <if test='V2_OR_GREATER'>
                              <code:method-call name='HasParam'>
                                 <copy-of value='select(context, src + "reference", code)'/>
                                 <code:arguments>
                                    <code:string literal='true'>
                                       <value-of value='param.Attribute("name")!.Value'/>
                                    </code:string>
                                 </code:arguments>
                              </code:method-call>
                           </if>
                           <code:not>
                              <code:field-reference name='{src_init_field(param)}'>
                                 <code:this-reference/>
                              </code:field-reference>
                           </code:not>
                        </code:or-else>
                        <code:block>
                           <code:assign>
                              <code:property-reference name='{param.Attribute("member-name")!.Value}'>
                                 <if test='verbatim'>
                                    <attribute name='verbatim' value='fn_string(verbatim)'/>
                                 </if>
                                 <code:this-reference/>
                              </code:property-reference>
                              <code:method-call name='Param'>
                                 <copy-of value='select(context, src + "reference", code)'/>
                                 <code:type-arguments>
                                    <copy-of value='param.Element(code + "type-reference")'/>
                                 </code:type-arguments>
                                 <code:arguments>
                                    <code:string literal='true'>
                                       <value-of value='param.Attribute("name")!.Value'/>
                                    </code:string>
                                    <code:argument name='required'>
                                       <code:bool value='true'/>
                                    </code:argument>
                                 </code:arguments>
                              </code:method-call>
                           </code:assign>
                        </code:block>
                     </code:if>
                  </when>
                  <when test='V2_OR_GREATER
                        &amp;&amp; !accepted'>
                     <code:if>
                        <code:method-call name='HasParam'>
                           <copy-of value='select(context, src + "reference", code)'/>
                           <code:arguments>
                              <code:string literal='true'>
                                 <value-of value='param.Attribute("name")!.Value'/>
                              </code:string>
                           </code:arguments>
                        </code:method-call>
                        <code:block>
                           <code:assign>
                              <code:field-reference name='{src_init_field(param)}'>
                                 <code:this-reference/>
                              </code:field-reference>
                              <code:bool value='false'/>
                           </code:assign>
                        </code:block>
                     </code:if>
                  </when>
               </choose>
            </for-each>
         </code:block>
      </code:method>
   </template>


   <!-- ## Instructions -->

   <template name='src:param-expression'>
      <param name='el' as='XElement' required='yes'/>
      <param name='name' value='xcst_name(el.Attribute("name")!)' as='string'/>
      <param name='type' as='XElement'>
         <choose>
            <when test='el.Attribute("as") is XAttribute asAttr'>
               <code:type-reference name='{xcst_type(asAttr)}'/>
            </when>
            <otherwise>
               <copy-of value='src_nullable_object_type'/>
            </otherwise>
         </choose>
      </param>
      <param name='global' value='false' as='bool'/>
      <param name='packageManifest' as='XElement' tunnel='yes' required='yes'/>
      <param name='context' as='XElement' tunnel='yes' required='yes'/>
      <param name='language' as='string' tunnel='yes' required='yes'/>

      <variable name='nameStr'>
         <code:string literal='true'>
            <value-of value='xcst_unescape_identifier(name, language)'/>
         </code:string>
      </variable>

      <variable name='text' value='xcst_text(el)'/>
      <variable name='hasDefaultValue' value='xcst_has_value(el, text)'/>

      <variable name='required' value='
         (el.Attribute("required") is XAttribute reqAttr) ?
            xcst_boolean(reqAttr)!.Value
            : false'/>

      <variable name='tunnel' value='
         (el.Attribute("tunnel") is XAttribute tunnelAttr) ?
            xcst_boolean(tunnelAttr)!.Value
            : false'/>

      <assert test='!global || !required'/>

      <variable name='templateMeta' as='XElement?'>
         <choose>
            <when test='el.Parent!.Name == c + "template"
                  &amp;&amp; el.Parent.Attribute("name") != null'>
               <variable name='parentId' value='fn_generate_id(el.Parent!)'/>
               <object value='packageManifest
                  .Elements(xcst + "template")
                  .First(p => p.Attribute("declaration-id")?.Value == parentId)'/>
            </when>
            <otherwise value='(XElement?)null'/>
         </choose>
      </variable>

      <if test='el.Parent!.Name == c + "delegate"'>
         <if test='!(!hasDefaultValue || !required)'>
            <message terminate='yes' error-code='XTSE0010' error-data='src_error_object(el)' transform-text='trim'>
               The 'value' attribute or child element/text should be omitted when required='yes'.
            </message>
         </if>
      </if>

      <variable name='defaultValue' as='XElement?'>
         <if test='hasDefaultValue'>
            <call-template name='src:value'>
               <with-param name='el' value='el'/>
               <with-param name='text' value='text'/>
            </call-template>
         </if>
      </variable>

      <choose>
         <when test='templateMeta != null
               &amp;&amp; xcst_typed_params(templateMeta)
               &amp;&amp; !tunnel'>
            <variable name='typedRef'>
               <code:property-reference name='Parameters'>
                  <copy-of value='select(context, src + "reference", code)'/>
               </code:property-reference>
            </variable>
            <choose>
               <when test='!required &amp;&amp; !hasDefaultValue'>
                  <code:property-reference name='{name}'>
                     <copy-of value='typedRef'/>
                  </code:property-reference>
               </when>
               <otherwise>
                  <code:method-call name='TypedParam'>
                     <copy-of value='select(src_template_context(null), code + "type-reference")'/>
                     <if test='required || !hasDefaultValue'>
                        <code:type-arguments>
                           <copy-of value='type'/>
                           <copy-of value='type'/>
                        </code:type-arguments>
                     </if>
                     <code:arguments>
                        <copy-of value='nameStr'/>
                        <code:property-reference name='{src_params_type_init_name(xcst_unescape_identifier(name, language))}'>
                           <copy-of value='typedRef'/>
                        </code:property-reference>
                        <code:property-reference name='{name}'>
                           <copy-of value='typedRef'/>
                        </code:property-reference>
                        <if test='hasDefaultValue'>
                           <code:lambda>
                              <copy-of value='defaultValue'/>
                           </code:lambda>
                        </if>
                        <if test='required'>
                           <code:argument name='required'>
                              <code:bool value='true'/>
                           </code:argument>
                        </if>
                     </code:arguments>
                  </code:method-call>
               </otherwise>
            </choose>
         </when>
         <otherwise>
            <code:method-call name='Param'>
               <copy-of value='select(context, src + "reference", code)'/>
               <if test='required
                     || !hasDefaultValue
                     || global'>
                  <code:type-arguments>
                     <copy-of value='type'/>
                  </code:type-arguments>
               </if>
               <code:arguments>
                  <copy-of value='nameStr'/>
                  <if test='hasDefaultValue'>
                     <code:lambda>
                        <copy-of value='defaultValue'/>
                     </code:lambda>
                  </if>
                  <if test='required'>
                     <code:argument name='required'>
                        <code:bool value='true'/>
                     </code:argument>
                  </if>
                  <if test='tunnel'>
                     <code:argument name='tunnel'>
                        <code:bool value='true'/>
                     </code:argument>
                  </if>
               </code:arguments>
            </code:method-call>
         </otherwise>
      </choose>
   </template>

   <template name='src:param-var'>
      <param name='el' as='XElement' required='yes'/>

      <assert test='el.Parent!.Name != c + "function"'/>

      <variable name='name' value='xcst_name(el.Attribute("name")!)'/>

      <code:variable name='{name}'>
         <call-template name='src:line-number'>
            <with-param name='el' value='el'/>
         </call-template>
         <if test='el.Attribute("as") is XAttribute asAttr'>
            <code:type-reference name='{xcst_type(asAttr)}'/>
         </if>
         <call-template name='src:param-expression'>
            <with-param name='el' value='el'/>
            <with-param name='name' value='name'/>
         </call-template>
      </code:variable>
   </template>

   <template match='XElement el &amp;&amp; el.Name == c + "variable"' mode='src:statement'>

      <call-template name='xcst:validate-attribs'>
         <with-param name='el' value='el'/>
         <with-param name='required' value='new[] { "name" }'/>
         <with-param name='optional' value='new[] { "value", "as" }'/>
      </call-template>

      <call-template name='xcst:value-or-sequence-constructor'>
         <with-param name='el' value='el'/>
      </call-template>

      <variable name='text' value='xcst_text(el)'/>
      <variable name='hasValue' value='xcst_has_value(el, text)'/>

      <code:variable name='{xcst_name(el.Attribute("name")!)}'>
         <call-template name='src:line-number'>
            <with-param name='el' value='el'/>
         </call-template>
         <call-template name='xcst:variable-type'>
            <with-param name='el' value='el'/>
            <with-param name='text' value='text'/>
            <with-param name='ignoreSeqctor' value='true'/>
         </call-template>
         <if test='hasValue'>
            <call-template name='src:value'>
               <with-param name='el' value='el'/>
               <with-param name='text' value='text'/>
            </call-template>
         </if>
      </code:variable>
   </template>

   <template match='XElement el &amp;&amp; el.Name == c + "variable"' mode='xcst:instruction'>
      <xcst:instruction void='true'/>
   </template>

   <template match='XElement el &amp;&amp; el.Name == c + "set"' mode='src:statement'>

      <call-template name='xcst:validate-attribs'>
         <with-param name='el' value='el'/>
         <with-param name='required' value='new[] { "ref" }'/>
         <with-param name='optional' value='new[] { "as", "value" }'/>
      </call-template>

      <call-template name='xcst:value-or-sequence-constructor'>
         <with-param name='el' value='el'/>
      </call-template>

      <code:assign>
         <call-template name='src:line-number'>
            <with-param name='el' value='el'/>
         </call-template>
         <code:expression value='{xcst_expression(el.Attribute("ref")!)}'/>
         <call-template name='src:value'>
            <with-param name='el' value='el'/>
         </call-template>
      </code:assign>
   </template>

   <template match='XElement el &amp;&amp; el.Name == c + "set"' mode='xcst:instruction'>
      <xcst:instruction void='true'/>
   </template>

</module>
