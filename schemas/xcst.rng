<?xml version="1.0" encoding="utf-8"?>
<!--
 Copyright 2015 Max Toro Q.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->
<grammar xmlns="http://relaxng.org/ns/structure/1.0"
   xmlns:ann="http://relaxng.org/ns/compatibility/annotations/1.0"
   xmlns:docs="http://maxtoroq.github.io/XCST/docs"
   xmlns:c="http://maxtoroq.github.io/XCST"
   ns="http://maxtoroq.github.io/XCST"
   datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes">

   <ann:documentation>Schema for XCST 1.0 modules and packages</ann:documentation>

   <start>
      <choice>
         <ref name="module"/>
         <ref name="package"/>
      </choice>
   </start>

   <define name="declaration" docs:display-type="true">
      <choice>
         <ref name="attribute-set"/>
         <ref name="function"/>
         <ref name="import"/>
         <ref name="mode"/>
         <ref name="output"/>
         <ref name="param"/>
         <ref name="template"/>
         <ref name="type"/>
         <ref name="use-package"/>
         <ref name="validation"/>
         <ref name="variable"/>
      </choice>
   </define>

   <define name="instruction" docs:display-type="true">
      <choice>
         <ref name="apply-templates"/>
         <ref name="array"/>
         <ref name="assert"/>
         <ref name="attribute"/>
         <ref name="break"/>
         <ref name="call-template"/>
         <ref name="choose"/>
         <ref name="comment"/>
         <ref name="continue"/>
         <ref name="copy-of"/>
         <ref name="delegate"/>
         <ref name="document"/>
         <ref name="element"/>
         <ref name="invoke-delegate"/>
         <ref name="invoke-package"/>
         <ref name="fallback"/>
         <ref name="for-each"/>
         <ref name="for-each-group"/>
         <ref name="if"/>
         <ref name="map"/>
         <ref name="map-entry"/>
         <ref name="message"/>
         <ref name="namespace"/>
         <ref name="next-match"/>
         <ref name="next-template"/>
         <ref name="object"/>
         <ref name="processing-instruction"/>
         <ref name="result-document"/>
         <ref name="return"/>
         <ref name="script"/>
         <ref name="serialize"/>
         <ref name="set"/>
         <ref name="switch"/>
         <ref name="text"/>
         <ref name="try"/>
         <ref name="value-of"/>
         <ref name="variable"/>
         <ref name="void"/>
         <ref name="while"/>
      </choice>
   </define>

   <define name="standard-attributes">
      <zeroOrMore>
         <choice>
            <attribute name="expand-text">
               <ann:documentation>Enables or disables text value templates for descendant text nodes.</ann:documentation>
               <ref name="boolean"/>
            </attribute>
            <attribute name="extension-element-prefixes">
               <ann:documentation>Designates namespaces as extension namespaces.</ann:documentation>
               <ref name="extension-element-prefixes"/>
            </attribute>
            <attribute name="transform-text">
               <ann:documentation>Enables or disables text normalization for descendant text nodes.</ann:documentation>
               <ref name="transform-text"/>
            </attribute>
         </choice>
      </zeroOrMore>
      <ref name="extension-attributes"/>
   </define>

   <define name="extension-attributes">
      <zeroOrMore>
         <attribute>
            <anyName>
               <except>
                  <nsName/>
                  <nsName ns=""/>
               </except>
            </anyName>
         </attribute>
      </zeroOrMore>
   </define>

   <define name="literal-result-element">
      <element>
         <anyName>
            <except>
               <nsName/>
            </except>
         </anyName>
         <ref name="literal-result-element-attributes"/>
         <ref name="sequence-constructor"/>
      </element>
   </define>

   <define name="literal-result-element-attributes">
      <zeroOrMore>
         <choice>
            <attribute>
               <anyName>
                  <except>
                     <nsName/>
                  </except>
               </anyName>
               <ref name="avt"/>
            </attribute>
            <attribute name="c:expand-text">
               <ref name="boolean"/>
            </attribute>
            <attribute name="c:extension-element-prefixes">
               <ref name="extension-element-prefixes"/>
            </attribute>
            <attribute name="c:transform-text">
               <ref name="transform-text"/>
            </attribute>
            <attribute name="c:use-attribute-sets">
               <ref name="use-attribute-sets"/>
            </attribute>
         </choice>
      </zeroOrMore>
   </define>

   <define name="sequence-constructor" docs:display-type="true">
      <zeroOrMore>
         <choice>
            <ref name="instruction"/>
            <ref name="literal-result-element"/>
            <text/>
         </choice>
      </zeroOrMore>
      <optional>
         <ref name="on-empty"/>
      </optional>
   </define>

   <define name="visibility-attribute">
      <optional>
         <attribute name="visibility">
            <ann:documentation>Specifies how the current component can be used in other (using) packages.</ann:documentation>
            <ref name="visibility"/>
         </attribute>
      </optional>
   </define>

   <define name="user-defined-data-element">
      <element>
         <anyName>
            <except>
               <nsName/>
               <nsName ns=""/>
            </except>
         </anyName>
         <ref name="any-nodes"/>
      </element>
   </define>

   <define name="any-nodes">
      <zeroOrMore>
         <choice>
            <attribute>
               <anyName/>
            </attribute>
            <text/>
            <element>
               <anyName/>
               <ref name="any-nodes"/>
            </element>
         </choice>
      </zeroOrMore>
   </define>

   <define name="module">
      <element name="module">
         <ann:documentation>Represents an XCST module.</ann:documentation>
         <ref name="module-content"/>
      </element>
   </define>

   <define name="package">
      <element name="package">
         <ann:documentation>Represents an XCST package.</ann:documentation>
         <zeroOrMore>
            <choice>
               <attribute name="name">
                  <ann:documentation>The fully-qualified class name for the current package.</ann:documentation>
                  <ref name="type_name"/>
               </attribute>
               <attribute name="visibility">
                  <ann:documentation>Specifies how the current package can be used from other assemblies.</ann:documentation>
                  <ref name="package-visibility"/>
               </attribute>
            </choice>
         </zeroOrMore>
         <ref name="module-content"/>
      </element>
   </define>

   <define name="module-content">
      <attribute name="version">
         <ann:documentation>The XCST version for the current and descendant elements (usually "1.0").</ann:documentation>
         <ref name="version"/>
      </attribute>
      <attribute name="language">
         <ann:documentation>The expression language for this module (usually "C#" or "VisualBasic").</ann:documentation>
         <ref name="language"/>
      </attribute>
      <optional>
         <attribute name="default-mode">
            <ann:documentation>The default mode of template rules for the current module.</ann:documentation>
            <ref name="eqname"/>
         </attribute>
      </optional>
      <ref name="standard-attributes"/>
      <zeroOrMore>
         <ref name="import-namespace"/>
      </zeroOrMore>
      <zeroOrMore>
         <choice>
            <ref name="declaration"/>
            <ref name="user-defined-data-element"/>
         </choice>
      </zeroOrMore>
   </define>

   <define name="import-namespace">
      <element name="import-namespace">
         <ann:documentation>Imports a namespace.</ann:documentation>
         <attribute name="ns">
            <ann:documentation>The namespace to import.</ann:documentation>
            <ref name="namespace_name"/>
         </attribute>
         <optional>
            <attribute name="alias">
               <ann:documentation>An alias for the namespace.</ann:documentation>
               <ref name="identifier"/>
            </attribute>
         </optional>
         <ref name="standard-attributes"/>
      </element>
   </define>

   <define name="use-package">
      <element name="use-package">
         <ann:documentation>Specifies a package dependency.</ann:documentation>
         <attribute name="name">
            <ann:documentation>The class name of the package to use. Must be a fully-qualified name when using from implicit or unnamed packages.</ann:documentation>
            <ref name="type_name"/>
         </attribute>
         <ref name="standard-attributes"/>
         <zeroOrMore>
            <choice>
               <ref name="accept"/>
               <ref name="override"/>
            </choice>
         </zeroOrMore>
      </element>
   </define>

   <define name="accept">
      <element name="accept">
         <ann:documentation>Specifies component dependencies.</ann:documentation>
         <attribute name="component">
            <ann:documentation>The type of component to accept.</ann:documentation>
            <choice>
               <value>attribute-set</value>
               <value>function</value>
               <value>mode</value>
               <value>template</value>
               <value>type</value>
               <value>variable</value>
            </choice>
         </attribute>
         <attribute name="names">
            <ann:documentation>A list of space separated component names, or "*" to accept all. Unprefixed qualified names are in the null namespace.</ann:documentation>
            <choice>
               <list>
                  <zeroOrMore>
                     <data type="token"/>
                  </zeroOrMore>
               </list>
               <value>*</value>
            </choice>
         </attribute>
         <ref name="standard-attributes"/>
      </element>
   </define>

   <define name="override">
      <element name="override">
         <ann:documentation>Container element for overriding components.</ann:documentation>
         <ref name="standard-attributes"/>
         <zeroOrMore>
            <choice>
               <ref name="template"/>
               <ref name="function"/>
               <ref name="variable"/>
               <ref name="param"/>
               <ref name="attribute-set"/>
            </choice>
         </zeroOrMore>
      </element>
   </define>

   <define name="import">
      <element name="import">
         <ann:documentation>Specifies a module dependency.</ann:documentation>
         <attribute name="href">
            <ann:documentation>The relative or absolute URI of the module to import.</ann:documentation>
            <ref name="uri"/>
         </attribute>
         <ref name="standard-attributes"/>
      </element>
   </define>

   <define name="template">
      <element name="template">
         <ann:documentation>Defines a named template or template rule.</ann:documentation>
         <choice>
            <group>
               <attribute name="name">
                  <ann:documentation>The name of the template.</ann:documentation>
                  <ref name="eqname"/>
               </attribute>
               <ref name="visibility-attribute"/>
            </group>
            <group>
               <attribute name="match">
                  <ann:documentation>A pattern expression.</ann:documentation>
                  <ref name="pattern"/>
               </attribute>
               <optional>
                  <attribute name="mode">
                     <ann:documentation>A space separated list of either eqname or "#default"; or "#all". Unprefixed qualified names are in the null namespace.</ann:documentation>
                     <choice>
                        <value>#all</value>
                        <list>
                           <oneOrMore>
                              <choice>
                                 <ref name="eqname"/>
                                 <value>#default</value>
                              </choice>
                           </oneOrMore>
                        </list>
                     </choice>
                  </attribute>
               </optional>
            </group>
         </choice>
         <optional>
            <attribute name="as">
               <ann:documentation>The return type.</ann:documentation>
               <ref name="type_name"/>
            </attribute>
         </optional>
         <ref name="standard-attributes"/>
         <zeroOrMore>
            <ref name="param"/>
         </zeroOrMore>
         <ref name="sequence-constructor"/>
      </element>
   </define>

   <define name="function">
      <element name="function">
         <ann:documentation>Defines a function.</ann:documentation>
         <attribute name="name">
            <ann:documentation>The name of the function.</ann:documentation>
            <ref name="identifier"/>
         </attribute>
         <optional>
            <attribute name="as">
               <ann:documentation>The return type. Omit this attribute for void functions.</ann:documentation>
               <ref name="type_name"/>
            </attribute>
         </optional>
         <ref name="visibility-attribute"/>
         <ref name="standard-attributes"/>
         <zeroOrMore>
            <ref name="param"/>
         </zeroOrMore>
         <ref name="sequence-constructor"/>
      </element>
   </define>

   <define name="param">
      <element name="param">
         <ann:documentation>Defines a package, template, function or delegate parameter.</ann:documentation>
         <attribute name="name">
            <ann:documentation>The name of the parameter.</ann:documentation>
            <ref name="identifier"/>
         </attribute>
         <choice>
            <attribute name="value">
               <ann:documentation>The default value of the parameter.</ann:documentation>
               <ref name="expression"/>
            </attribute>
            <ref name="sequence-constructor"/>
         </choice>
         <zeroOrMore>
            <choice>
               <attribute name="as">
                  <ann:documentation>The type of the parameter.</ann:documentation>
                  <ref name="type_name"/>
               </attribute>
               <attribute name="required">
                  <ann:documentation>Specifies if the parameter is required.</ann:documentation>
                  <ref name="boolean"/>
               </attribute>
               <attribute name="tunnel">
                  <ann:documentation>Specifies if the parameter is a tunnel parameter.</ann:documentation>
                  <ref name="boolean"/>
               </attribute>
            </choice>
         </zeroOrMore>
         <ref name="standard-attributes"/>
      </element>
   </define>

   <define name="attribute-set">
      <element name="attribute-set">
         <ann:documentation>Defines an attribute set.</ann:documentation>
         <attribute name="name">
            <ann:documentation>The name of the attribute set.</ann:documentation>
            <ref name="eqname"/>
         </attribute>
         <optional>
            <attribute name="use-attribute-sets">
               <ann:documentation>Specifies other attribute sets to use before the current one.</ann:documentation>
               <ref name="use-attribute-sets"/>
            </attribute>
         </optional>
         <ref name="visibility-attribute"/>
         <ref name="standard-attributes"/>
         <zeroOrMore>
            <ref name="attribute"/>
         </zeroOrMore>
      </element>
   </define>

   <define name="mode">
      <element name="mode">
         <ann:documentation>Defines an explicit mode.</ann:documentation>
         <zeroOrMore>
            <attribute name="name">
               <ann:documentation>The name of the mode.</ann:documentation>
               <ref name="eqname"/>
            </attribute>
            <attribute name="on-no-match">
               <ann:documentation>Specifies the behavior when an item does not match any of the available template rules. The default is shallow-copy.</ann:documentation>
               <choice>
                  <value>deep-copy</value>
                  <value>shallow-copy</value>
                  <value>deep-skip</value>
                  <value>shallow-skip</value>
                  <value>text-only-copy</value>
                  <value>fail</value>
               </choice>
            </attribute>
            <attribute name="visibility">
               <ann:documentation>Specifies how the current component can be used in other (using) packages.</ann:documentation>
               <ref name="visibility-except-abstract"/>
            </attribute>
         </zeroOrMore>
         <ref name="standard-attributes"/>
      </element>
   </define>

   <define name="type">
      <element name="type">
         <ann:documentation>Defines a type.</ann:documentation>
         <attribute name="name">
            <ann:documentation>The name of the type.</ann:documentation>
            <ref name="identifier"/>
         </attribute>
         <optional>
            <attribute name="visibility">
               <ann:documentation>Specifies how the current component can be used in other (using) packages.</ann:documentation>
               <ref name="visibility-except-abstract"/>
            </attribute>
         </optional>
         <ref name="type-or-member-attributes" docs:attrib-group=""/>
         <optional>
            <attribute name="resource-type">
               <ann:documentation>A type that contains resources for description, display-name, edit-hint, group and short-name attributes.</ann:documentation>
               <ref name="type_name"/>
            </attribute>
         </optional>
         <ref name="validation-or-type-attributes"/>
         <ref name="standard-attributes"/>
         <zeroOrMore>
            <ref name="metadata"/>
         </zeroOrMore>
         <zeroOrMore>
            <ref name="member"/>
         </zeroOrMore>
      </element>
   </define>

   <define name="member">
      <element name="member">
         <ann:documentation>Defines a type member.</ann:documentation>
         <attribute name="name" docs:attrib-group="Definition">
            <ann:documentation>The name of the member.</ann:documentation>
            <ref name="identifier"/>
         </attribute>
         <zeroOrMore>
            <ref name="metadata"/>
         </zeroOrMore>
         <optional>
            <choice>
               <attribute name="as" docs:attrib-group="Definition">
                  <ann:documentation>The type of the member.</ann:documentation>
                  <ref name="type_name"/>
               </attribute>
               <oneOrMore>
                  <ref name="member"/>
               </oneOrMore>
            </choice>
         </optional>
         <optional docs:attrib-group="Definition">
            <choice>
               <attribute name="value">
                  <ann:documentation>An initial value for this member.</ann:documentation>
                  <ref name="expression"/>
               </attribute>
               <attribute name="expression">
                  <ann:documentation>An expression for computed members.</ann:documentation>
                  <ref name="expression"/>
               </attribute>
            </choice>
         </optional>
         <optional>
            <attribute name="auto-initialize" docs:attrib-group="Definition">
               <ann:documentation>Auto-assign an initial value to this member.</ann:documentation>
               <ref name="boolean"/>
            </attribute>
         </optional>
         <zeroOrMore docs:attrib-group="Presentation">
            <choice>
               <attribute name="display">
                  <ann:documentation>Specifies if this member should be displayed in a UI.</ann:documentation>
                  <choice>
                     <value>view-only</value>
                     <ann:documentation>Indicates that this member should only be displayed in a viewing UI.</ann:documentation>

                     <value>edit-only</value>
                     <ann:documentation>Indicates that this member should only be displayed in an editing UI.</ann:documentation>

                     <value>hidden</value>
                     <ann:documentation>Indicates that this member should only be displayed in an editing UI as a hidden field.</ann:documentation>

                     <ref name="boolean"/>
                  </choice>
               </attribute>
               <attribute name="display-name">
                  <ann:documentation>A name suitable for UI.</ann:documentation>
                  <ref name="string"/>
               </attribute>
               <attribute name="description">
                  <ann:documentation>A description of this member suitable for UI.</ann:documentation>
                  <ref name="string"/>
               </attribute>
               <attribute name="short-name">
                  <ann:documentation>A shorter name suitable for UI where the display name would be too long to fit (e.g. a table column).</ann:documentation>
                  <ref name="string"/>
               </attribute>
               <attribute name="edit-hint">
                  <ann:documentation>A hint to the user of what can be entered in a control for this member.</ann:documentation>
                  <ref name="string"/>
               </attribute>
               <attribute name="order">
                  <ann:documentation>A number that indicates the relative position of this member in a UI.</ann:documentation>
                  <ref name="integer"/>
               </attribute>
               <attribute name="group">
                  <ann:documentation>A name that is used to group members in a UI.</ann:documentation>
                  <ref name="string"/>
               </attribute>
               <attribute name="format">
                  <ann:documentation>A formatting string that specifies the display format for the value of this member.</ann:documentation>
                  <ref name="string"/>
               </attribute>
               <attribute name="apply-format-in-edit-mode">
                  <ann:documentation>Specifies if the display format should be used in an edit control for this member.</ann:documentation>
                  <ref name="boolean"/>
               </attribute>
               <attribute name="disable-output-escaping">
                  <ann:documentation>Specifies if this member should not be escaped when displaying in a UI (e.g. HTML content).</ann:documentation>
                  <ref name="boolean"/>
               </attribute>
               <attribute name="null-text">
                  <ann:documentation>A text that is displayed for this member when the value is null.</ann:documentation>
                  <ref name="string"/>
               </attribute>
               <attribute name="template">
                  <ann:documentation>The name of a template to use when displaying this member in a UI.</ann:documentation>
                  <ref name="string"/>
               </attribute>
            </choice>
         </zeroOrMore>
         <zeroOrMore docs:attrib-group="Validation">
            <choice>
               <attribute name="data-type">
                  <choice>
                     <value>CreditCard</value>
                     <value>Currency</value>
                     <value>Date</value>
                     <value>DateTime</value>
                     <value>Duration</value>
                     <value>EmailAddress</value>
                     <value>Html</value>
                     <value>ImageUrl</value>
                     <value>MultilineText</value>
                     <value>Password</value>
                     <value>PhoneNumber</value>
                     <value>PostalCode</value>
                     <value>Text</value>
                     <value>Time</value>
                     <value>Upload</value>
                     <value>Url</value>
                  </choice>
               </attribute>
               <attribute name="required">
                  <ann:documentation>Specifies if this member is required.</ann:documentation>
                  <ref name="boolean"/>
               </attribute>
               <attribute name="max-length">
                  <ann:documentation>A maximum valid length for this member.</ann:documentation>
                  <ref name="integer"/>
               </attribute>
               <attribute name="min-length">
                  <ann:documentation>A minimum valid length for this member.</ann:documentation>
                  <ref name="integer"/>
               </attribute>
               <attribute name="pattern">
                  <ann:documentation>A regular expression that a valid value for this member must conform to.</ann:documentation>
                  <ref name="string"/>
               </attribute>
               <attribute name="min">
                  <ann:documentation>A minimum valid value for this member.</ann:documentation>
                  <ref name="string"/>
               </attribute>
               <attribute name="max">
                  <ann:documentation>A maximum valid value for this member.</ann:documentation>
                  <ref name="string"/>
               </attribute>
               <attribute name="equal-to">
                  <ann:documentation>The name of another member that a valid value for this member should be equal to.</ann:documentation>
                  <ref name="identifier"/>
               </attribute>
            </choice>
         </zeroOrMore>
         <optional docs:attrib-group="Serialization">
            <attribute name="serialize">
               <ann:documentation>Specifies if this member should be considered when serializing an instance of the type.</ann:documentation>
               <ref name="boolean"/>
            </attribute>
         </optional>
         <ref name="type-or-member-attributes"/>
         <ref name="validation-or-member-attributes" docs:attrib-group="Validation"/>
         <ref name="standard-attributes"/>
      </element>
   </define>

   <define name="metadata">
      <element name="metadata">
         <ann:documentation>Defines type or member custom metadata.</ann:documentation>
         <attribute name="name">
            <ann:documentation>The metadata name.</ann:documentation>
            <ref name="type_name"/>
         </attribute>
         <optional>
            <attribute name="args">
               <ann:documentation>The metadata arguments.</ann:documentation>
               <ref name="expression"/>
            </attribute>
         </optional>
         <ref name="standard-attributes"/>
      </element>
   </define>

   <define name="type-or-member-attributes">
      <zeroOrMore>
         <choice>
            <attribute name="allow-empty-string" docs:attrib-group="Validation">
               <ann:documentation>Specifies if an empty string is a valid value for this member.</ann:documentation>
               <ref name="boolean"/>
            </attribute>
            <attribute name="text-member" docs:attrib-group="Presentation">
               <ann:documentation>The name of the member to use as the text representation for this type.</ann:documentation>
               <ref name="identifier"/>
            </attribute>
         </choice>
      </zeroOrMore>
   </define>

   <define name="output">
      <element name="output">
         <ann:documentation>Defines serialization parameters.</ann:documentation>
         <zeroOrMore>
            <choice>
               <attribute name="name">
                  <ann:documentation>The name of the output definition.</ann:documentation>
                  <ref name="eqname"/>
               </attribute>
               <attribute name="method">
                  <ann:documentation>Specifies the output format.</ann:documentation>
                  <ref name="method"/>
               </attribute>
               <attribute name="byte-order-mark">
                  <ann:documentation>Specifies whether a byte order mark is written at the start of the file.</ann:documentation>
                  <ref name="boolean"/>
               </attribute>
               <attribute name="cdata-section-elements">
                  <ann:documentation>Specifies elements whose child text nodes should be wrapped in a CDATA section.</ann:documentation>
                  <ref name="cdata-section-elements"/>
               </attribute>
               <attribute name="doctype-public">
                  <ann:documentation>Specifies a public document type declaration.</ann:documentation>
                  <ref name="string"/>
               </attribute>
               <attribute name="doctype-system">
                  <ann:documentation>Specifies a system document type declaration.</ann:documentation>
                  <ref name="string"/>
               </attribute>
               <attribute name="encoding">
                  <ann:documentation>Specifies the output encoding.</ann:documentation>
                  <ref name="string"/>
               </attribute>
               <attribute name="escape-uri-attributes">
                  <ann:documentation>Specifies whether to escape URI attributes in HTML documents.</ann:documentation>
                  <ref name="boolean"/>
               </attribute>
               <!--
               <attribute name="html-version">
                  <ann:documentation>Specifies the HTML version.</ann:documentation>
                  <ref name="decimal"/>
               </attribute>
               <attribute name="include-content-type">
                  <ann:documentation>Specifies whether to include a meta element in the head of HTML documents, specifying the used character encoding.</ann:documentation>
                  <ref name="boolean"/>
               </attribute>
               -->
               <attribute name="indent">
                  <ann:documentation>Specifies whether to indent the output.</ann:documentation>
                  <ref name="boolean"/>
               </attribute>
               <attribute name="indent-spaces">
                  <ann:documentation>The number of spaces to use for indenting.</ann:documentation>
                  <ref name="integer"/>
               </attribute>
               <attribute name="item-separator">
                  <ann:documentation>A string to intersperse between items.</ann:documentation>
                  <ref name="string"/>
               </attribute>
               <attribute name="media-type">
                  <ann:documentation>The media type (MIME content type) of the output, to include in a meta element in the head of HTML documents.</ann:documentation>
                  <ref name="string"/>
               </attribute>
               <attribute name="omit-xml-declaration">
                  <ann:documentation>Specifies whether to omit the XML declaration.</ann:documentation>
                  <ref name="boolean"/>
               </attribute>
               <attribute name="standalone">
                  <ann:documentation>Specifies whether to include the standalone document declaration.</ann:documentation>
                  <ref name="standalone"/>
               </attribute>
               <!--
               <attribute name="suppress-indentation">
                  <ann:documentation>Specifies elements that should not be indented.</ann:documentation>
                  <ref name="suppress-indentation"/>
               </attribute>
               <attribute name="undeclare-prefixes">
                  <ann:documentation>Specifies whether to undeclare namespaces when outputting XML 1.1.</ann:documentation>
                  <ref name="boolean"/>
               </attribute>
               -->
               <attribute name="version">
                  <ann:documentation>The version of the output format.</ann:documentation>
                  <ref name="output-version"/>
               </attribute>
               <attribute name="skip-character-check">
                  <ann:documentation>Specifies whether to skip character checking that ensures the output does not contain any illegal characters.</ann:documentation>
                  <ref name="boolean"/>
               </attribute>
               <ref name="standard-attributes"/>
            </choice>
         </zeroOrMore>
      </element>
   </define>

   <define name="validation">
      <element name="validation">
         <ann:documentation>Defines default values for validation messages.</ann:documentation>
         <ref name="validation-or-member-attributes"/>
         <ref name="validation-or-type-attributes"/>
         <ref name="standard-attributes"/>
      </element>
   </define>

   <define name="validation-or-type-attributes">
      <optional>
         <attribute name="validation-resource-type">
            <ann:documentation>A type that contains error message resources for validation attributes.</ann:documentation>
            <ref name="type_name"/>
         </attribute>
      </optional>
   </define>

   <define name="validation-or-member-attributes">
      <zeroOrMore>
         <choice>
            <attribute name="data-type-message">
               <ann:documentation>An error message for the data-type attribute.</ann:documentation>
               <ref name="string"/>
            </attribute>
            <attribute name="required-message">
               <ann:documentation>An error message for the required attribute.</ann:documentation>
               <ref name="string"/>
            </attribute>
            <attribute name="min-length-message">
               <ann:documentation>An error message for the min-length attribute.</ann:documentation>
               <ref name="string"/>
            </attribute>
            <attribute name="max-length-message">
               <ann:documentation>An error message for the max-length attribute.</ann:documentation>
               <ref name="string"/>
            </attribute>
            <attribute name="pattern-message">
               <ann:documentation>An error message for the pattern attribute.</ann:documentation>
               <ref name="string"/>
            </attribute>
            <attribute name="range-message">
               <ann:documentation>An error message for the min and max attributes.</ann:documentation>
               <ref name="string"/>
            </attribute>
            <attribute name="equal-to-message">
               <ann:documentation>An error message for the equal-to attribute.</ann:documentation>
               <ref name="string"/>
            </attribute>
         </choice>
      </zeroOrMore>
   </define>


   <!-- ## Instructions -->

   <define name="apply-templates">
      <element name="apply-templates">
         <attribute name="value">
            <ann:documentation>The value to process.</ann:documentation>
            <ref name="expression"/>
         </attribute>
         <zeroOrMore>
            <choice>
               <attribute name="mode">
                  <ann:documentation>An eqname or "#current" or "#default". Unprefixed qualified names are in the null namespace.</ann:documentation>
                  <choice>
                     <value>#current</value>
                     <value>#default</value>
                     <ref name="eqname"/>
                  </choice>
               </attribute>
               <attribute name="with-params">
                  <ann:documentation>An object with parameters.</ann:documentation>
                  <ref name="expr-obj-dict"/>
               </attribute>
               <attribute name="tunnel-params">
                  <ann:documentation>An object with tunnel parameters.</ann:documentation>
                  <ref name="expr-obj-dict"/>
               </attribute>
               <attribute name="separator">
                  <ann:documentation>A string to intersperse between the results of each processed item.</ann:documentation>
                  <ref name="avt"/>
               </attribute>
            </choice>
         </zeroOrMore>
         <ref name="standard-attributes"/>
         <zeroOrMore>
            <ref name="with-param"/>
         </zeroOrMore>
      </element>
   </define>

   <define name="array">
      <element name="array">
         <ann:documentation>Creates an array.</ann:documentation>
         <ref name="standard-attributes"/>
         <ref name="sequence-constructor"/>
      </element>
   </define>

   <define name="assert">
      <element name="assert">
         <ann:documentation>Checks for a condition and signals a message if the condition is false.</ann:documentation>
         <attribute name="test">
            <ann:documentation>The condition to check for.</ann:documentation>
            <ref name="expression">
               <docs:expression-type name="System.Boolean"/>
            </ref>
         </attribute>
         <choice>
            <attribute name="value">
               <ann:documentation>A message to signal.</ann:documentation>
               <ref name="expression"/>
            </attribute>
            <ref name="sequence-constructor"/>
         </choice>
         <ref name="standard-attributes"/>
      </element>
   </define>

   <define name="attribute">
      <element name="attribute">
         <ann:documentation>Creates an attribute node.</ann:documentation>
         <attribute name="name">
            <ann:documentation>The name of the attribute.</ann:documentation>
            <choice>
               <ref name="qname"/>
               <ref name="avt-expr"/>
            </choice>
         </attribute>
         <choice>
            <attribute name="value">
               <ann:documentation>The value of the attribute.</ann:documentation>
               <ref name="expression"/>
            </attribute>
            <ref name="sequence-constructor"/>
         </choice>
         <zeroOrMore>
            <choice>
               <attribute name="namespace">
                  <ann:documentation>The namespace of the attribute.</ann:documentation>
                  <choice>
                     <ref name="uri"/>
                     <ref name="avt-expr"/>
                  </choice>
               </attribute>
               <attribute name="separator">
                  <ann:documentation>A string to intersperse between items.</ann:documentation>
                  <ref name="avt"/>
               </attribute>
            </choice>
         </zeroOrMore>
         <ref name="standard-attributes"/>
      </element>
   </define>

   <define name="break">
      <element name="break">
         <ann:documentation>Exits from a loop.</ann:documentation>
         <ref name="standard-attributes"/>
      </element>
   </define>

   <define name="call-template">
      <element name="call-template">
         <ann:documentation>Invokes a template.</ann:documentation>
         <attribute name="name">
            <ann:documentation>The name of the template to invoke.</ann:documentation>
            <ref name="eqname"/>
         </attribute>
         <optional>
            <attribute name="tunnel-params">
               <ann:documentation>An object with tunnel parameters.</ann:documentation>
               <ref name="expr-obj-dict"/>
            </attribute>
         </optional>
         <ref name="standard-attributes"/>
         <zeroOrMore>
            <ref name="with-param"/>
         </zeroOrMore>
      </element>
   </define>

   <define name="catch">
      <element name="catch">
         <ann:documentation>Catches an exception.</ann:documentation>
         <zeroOrMore>
            <choice>
               <attribute name="exception">
                  <ann:documentation>The exception to catch.</ann:documentation>
                  <ref name="expression"/>
               </attribute>
               <attribute name="when">
                  <ann:documentation>An exception filter.</ann:documentation>
                  <ref name="expression"/>
               </attribute>
            </choice>
         </zeroOrMore>
         <choice>
            <attribute name="value">
               <ann:documentation>A value to output.</ann:documentation>
               <ref name="expression"/>
            </attribute>
            <ref name="sequence-constructor"/>
         </choice>
         <ref name="standard-attributes"/>
      </element>
   </define>

   <define name="choose">
      <element name="choose">
         <ann:documentation>Chooses between multiple alternatives.</ann:documentation>
         <ref name="standard-attributes"/>
         <oneOrMore>
            <ref name="when"/>
         </oneOrMore>
         <optional>
            <ref name="otherwise"/>
         </optional>
      </element>
   </define>

   <define name="comment">
      <element name="comment">
         <ann:documentation>Creates a comment node.</ann:documentation>
         <choice>
            <attribute name="value">
               <ann:documentation>The comment.</ann:documentation>
               <ref name="expression"/>
            </attribute>
            <ref name="sequence-constructor"/>
         </choice>
         <ref name="standard-attributes"/>
      </element>
   </define>

   <define name="continue">
      <element name="continue">
         <ann:documentation>Interrupts the current loop iteration and advances to the next.</ann:documentation>
         <ref name="standard-attributes"/>
      </element>
   </define>

   <define name="copy-of">
      <element name="copy-of">
         <ann:documentation>Creates a deep copy of nodes.</ann:documentation>
         <attribute name="value">
            <ann:documentation>The nodes to copy.</ann:documentation>
            <ref name="expression"/>
         </attribute>
         <ref name="standard-attributes"/>
      </element>
   </define>

   <define name="delegate">
      <element name="delegate">
         <ann:documentation>Creates a template delegate.</ann:documentation>
         <optional>
            <attribute name="as">
               <ann:documentation>The return type.</ann:documentation>
               <ref name="type_name"/>
            </attribute>
         </optional>
         <ref name="standard-attributes"/>
         <zeroOrMore>
            <ref name="param"/>
         </zeroOrMore>
         <ref name="sequence-constructor"/>
      </element>
   </define>

   <define name="document">
      <element name="document">
         <ann:documentation>Creates a temporary tree.</ann:documentation>
         <ref name="standard-attributes"/>
         <ref name="sequence-constructor"/>
      </element>
   </define>

   <define name="element">
      <element name="element">
         <ann:documentation>Creates an element node.</ann:documentation>
         <attribute name="name">
            <ann:documentation>The name of the element.</ann:documentation>
            <choice>
               <ref name="qname"/>
               <ref name="avt-expr"/>
            </choice>
         </attribute>
         <zeroOrMore>
            <choice>
               <attribute name="namespace">
                  <ann:documentation>The namespace of the element.</ann:documentation>
                  <choice>
                     <ref name="uri"/>
                     <ref name="avt-expr"/>
                  </choice>
               </attribute>
               <attribute name="use-attribute-sets">
                  <ann:documentation>Specifies attribute sets to use on the element.</ann:documentation>
                  <ref name="use-attribute-sets"/>
               </attribute>
            </choice>
         </zeroOrMore>
         <ref name="standard-attributes"/>
         <ref name="sequence-constructor"/>
      </element>
   </define>

   <define name="invoke-delegate">
      <element name="invoke-delegate">
         <ann:documentation>Invokes a template delegate.</ann:documentation>
         <attribute name="delegate">
            <ann:documentation>The template delegate instance.</ann:documentation>
            <ref name="expression">
               <docs:expression-type name="Xcst.XcstDelegate&lt;TItem>"/>
            </ref>
         </attribute>
         <zeroOrMore>
            <choice>
               <attribute name="with-params">
                  <ann:documentation>An object with parameters.</ann:documentation>
                  <ref name="expr-obj-dict"/>
               </attribute>
               <attribute name="tunnel-params">
                  <ann:documentation>An object with tunnel parameters.</ann:documentation>
                  <ref name="expr-obj-dict"/>
               </attribute>
            </choice>
         </zeroOrMore>
         <ref name="standard-attributes"/>
         <zeroOrMore>
            <ref name="with-param"/>
         </zeroOrMore>
      </element>
   </define>

   <define name="invoke-package">
      <element name="invoke-package">
         <ann:documentation>Invokes a dynamically loaded package.</ann:documentation>
         <attribute name="package">
            <ann:documentation>The package instance.</ann:documentation>
            <ref name="expression"/>
         </attribute>
         <zeroOrMore>
            <choice>
               <attribute name="package-params">
                  <ann:documentation>An object with package parameters.</ann:documentation>
                  <ref name="expr-obj-dict"/>
               </attribute>
               <attribute name="initial-template">
                  <ann:documentation>The name of the initial template.</ann:documentation>
                  <choice>
                     <ref name="eqname"/>
                     <ref name="avt-expr"/>
                  </choice>
               </attribute>
               <attribute name="initial-mode">
                  <ann:documentation>The name of the initial mode.</ann:documentation>
                  <choice>
                     <ref name="eqname"/>
                     <ref name="avt-expr"/>
                  </choice>
               </attribute>
               <attribute name="initial-match-selection">
                  <ann:documentation>The value of the initial match selection.</ann:documentation>
                  <ref name="expression"/>
               </attribute>
               <attribute name="template-params">
                  <ann:documentation>An object with template parameters.</ann:documentation>
                  <ref name="expr-obj-dict"/>
               </attribute>
               <attribute name="tunnel-params">
                  <ann:documentation>An object with tunnel parameters.</ann:documentation>
                  <ref name="expr-obj-dict"/>
               </attribute>
               <attribute name="tunnel-passthru">
                  <ann:documentation>Specifies whether to pass the current tunnel parameters.</ann:documentation>
                  <choice>
                     <ref name="boolean"/>
                     <ref name="avt-expr"/>
                  </choice>
               </attribute>
               <attribute name="base-output-uri">
                  <ann:documentation>The base output URI, used to resolve relative URIs of secondary result documents.</ann:documentation>
                  <choice>
                     <ref name="uri"/>
                     <ref name="avt-expr"/>
                  </choice>
               </attribute>
               <attribute name="base-uri">
                  <ann:documentation>The base URI, used to resolve relative URIs.</ann:documentation>
                  <choice>
                     <ref name="uri"/>
                     <ref name="avt-expr"/>
                  </choice>
               </attribute>
            </choice>
         </zeroOrMore>
         <ref name="standard-attributes"/>
      </element>
   </define>

   <define name="fallback">
      <element name="fallback">
         <ann:documentation>Defines fallback behavior for the parent element.</ann:documentation>
         <ref name="standard-attributes"/>
         <ref name="sequence-constructor"/>
      </element>
   </define>

   <define name="finally">
      <element name="finally">
         <ann:documentation>Defines unconditional behavior for the c:try instruction.</ann:documentation>
         <choice>
            <attribute name="value">
               <ann:documentation>A value to output.</ann:documentation>
               <ref name="expression"/>
            </attribute>
            <ref name="sequence-constructor"/>
         </choice>
         <ref name="standard-attributes"/>
      </element>
   </define>

   <define name="for-each">
      <element name="for-each">
         <ann:documentation>Processes each item in a sequence of items.</ann:documentation>
         <attribute name="name">
            <ann:documentation>The name of the item.</ann:documentation>
            <ref name="identifier"/>
         </attribute>
         <attribute name="in">
            <ann:documentation>The source of the items.</ann:documentation>
            <ref name="expression"/>
         </attribute>
         <optional>
            <attribute name="separator">
               <ann:documentation>A string to intersperse between the results of each processed item.</ann:documentation>
               <ref name="avt"/>
            </attribute>
         </optional>
         <ref name="standard-attributes"/>
         <zeroOrMore>
            <ref name="sort"/>
         </zeroOrMore>
         <ref name="sequence-constructor"/>
      </element>
   </define>

   <define name="for-each-group">
      <element name="for-each-group">
         <ann:documentation>Processes a sequence of items in groups.</ann:documentation>
         <attribute name="name">
            <ann:documentation>The name of the group.</ann:documentation>
            <ref name="identifier"/>
         </attribute>
         <attribute name="in">
            <ann:documentation>The source of the items.</ann:documentation>
            <ref name="expression">
               <docs:expression-type name="System.Collections.Generic.IEnumerable&lt;T>" topic="9eekhta0"/>
               <docs:expression-type name="System.Collections.IEnumerable"/>
            </ref>
         </attribute>
         <optional>
            <choice>
               <attribute name="group-by">
                  <ann:documentation>A lambda expression that computes the grouping key.</ann:documentation>
                  <ref name="lambda_expression"/>
               </attribute>
               <attribute name="group-size">
                  <ann:documentation>The maximum number of items a group may have.</ann:documentation>
                  <choice>
                     <ref name="integer"/>
                     <ref name="avt-expr"/>
                  </choice>
               </attribute>
            </choice>
         </optional>
         <ref name="standard-attributes"/>
         <zeroOrMore>
            <ref name="sort"/>
         </zeroOrMore>
         <ref name="sequence-constructor"/>
      </element>
   </define>

   <define name="if">
      <element name="if">
         <ann:documentation>Defines conditional behavior.</ann:documentation>
         <attribute name="test">
            <ann:documentation>The condition to check for the contents to be processed.</ann:documentation>
            <ref name="boolean_expression"/>
         </attribute>
         <ref name="standard-attributes"/>
         <ref name="sequence-constructor"/>
      </element>
   </define>

   <define name="map">
      <element name="map">
         <ann:documentation>Creates an expando object.</ann:documentation>
         <ref name="standard-attributes"/>
         <ref name="sequence-constructor"/>
      </element>
   </define>

   <define name="map-entry">
      <element name="map-entry">
         <ann:documentation>Creates a map entry.</ann:documentation>
         <attribute name="key">
            <ann:documentation>The key of the entry.</ann:documentation>
            <ref name="expression"/>
         </attribute>
         <choice>
            <attribute name="value">
               <ann:documentation>The value of the entry.</ann:documentation>
               <ref name="expression"/>
            </attribute>
            <ref name="sequence-constructor"/>
         </choice>
         <ref name="standard-attributes"/>
      </element>
   </define>

   <define name="message">
      <element name="message">
         <ann:documentation>Signals a message.</ann:documentation>
         <choice>
            <attribute name="value">
               <ann:documentation>The message.</ann:documentation>
               <ref name="expression"/>
            </attribute>
            <ref name="sequence-constructor"/>
         </choice>
         <zeroOrMore>
            <choice>
               <attribute name="terminate">
                  <ann:documentation>Specifies whether to stop the execution of the program.</ann:documentation>
                  <choice>
                     <ref name="boolean"/>
                     <ref name="avt-expr"/>
                  </choice>
               </attribute>
               <attribute name="error-code">
                  <ann:documentation>An error code associated with the message.</ann:documentation>
                  <choice>
                     <ref name="eqname"/>
                     <ref name="avt-expr"/>
                  </choice>
               </attribute>
               <attribute name="error-data">
                  <ann:documentation>An arbitrary object used to convey additional information about the error.</ann:documentation>
                  <ref name="expression"/>
               </attribute>
            </choice>
         </zeroOrMore>
         <ref name="standard-attributes"/>
      </element>
   </define>

   <define name="namespace">
      <element name="namespace">
         <ann:documentation>Creates a namespace node.</ann:documentation>
         <attribute name="name">
            <ann:documentation>The namespace prefix.</ann:documentation>
            <choice>
               <ref name="ncname"/>
               <ref name="avt-expr"/>
            </choice>
         </attribute>
         <choice>
            <attribute name="value">
               <ann:documentation>The namespace URI.</ann:documentation>
               <ref name="expression"/>
            </attribute>
            <ref name="sequence-constructor"/>
         </choice>
         <ref name="standard-attributes"/>
      </element>
   </define>

   <define name="next-match">
      <element name="next-match">
         <ann:documentation>Invokes the next template rule that matches the current input.</ann:documentation>
         <zeroOrMore>
            <choice>
               <attribute name="with-params">
                  <ann:documentation>An object with parameters.</ann:documentation>
                  <ref name="expr-obj-dict"/>
               </attribute>
               <attribute name="tunnel-params">
                  <ann:documentation>An object with tunnel parameters.</ann:documentation>
                  <ref name="expr-obj-dict"/>
               </attribute>
            </choice>
         </zeroOrMore>
         <ref name="standard-attributes"/>
         <zeroOrMore>
            <ref name="with-param"/>
         </zeroOrMore>
      </element>
   </define>

   <define name="next-template">
      <element name="next-template">
         <ann:documentation>Invokes the hidden template.</ann:documentation>
         <optional>
            <attribute name="tunnel-params">
               <ann:documentation>An object with tunnel parameters.</ann:documentation>
               <ref name="expr-obj-dict"/>
            </attribute>
         </optional>
         <ref name="standard-attributes"/>
         <zeroOrMore>
            <ref name="with-param"/>
         </zeroOrMore>
      </element>
   </define>

   <define name="object">
      <element name="object">
         <ann:documentation>Appends a value to the current output.</ann:documentation>
         <choice>
            <attribute name="value">
               <ann:documentation>The value to output.</ann:documentation>
               <ref name="expression"/>
            </attribute>
            <text/>
         </choice>
         <ref name="standard-attributes"/>
      </element>
   </define>

   <define name="on-empty">
      <element name="on-empty">
         <ann:documentation>Evaluates only if the current sequence constructor has not appended any items so far.</ann:documentation>
         <choice>
            <attribute name="value">
               <ann:documentation>The value to output.</ann:documentation>
               <ref name="expression"/>
            </attribute>
            <ref name="sequence-constructor"/>
         </choice>
         <ref name="standard-attributes"/>
      </element>
   </define>

   <define name="otherwise">
      <element name="otherwise">
         <ann:documentation>Represents a fallback in a c:choose or c:switch instruction in case no other choice is selected.</ann:documentation>
         <choice>
            <attribute name="value">
               <ann:documentation>The value to output.</ann:documentation>
               <ref name="expression"/>
            </attribute>
            <ref name="sequence-constructor"/>
         </choice>
         <ref name="standard-attributes"/>
      </element>
   </define>

   <define name="processing-instruction">
      <element name="processing-instruction">
         <ann:documentation>Creates a processing instruction node.</ann:documentation>
         <attribute name="name">
            <ann:documentation>The name of the processing instruction.</ann:documentation>
            <choice>
               <ref name="ncname"/>
               <ref name="avt-expr"/>
            </choice>
         </attribute>
         <choice>
            <attribute name="value">
               <ann:documentation>The processing instruction content.</ann:documentation>
               <ref name="expression"/>
            </attribute>
            <ref name="sequence-constructor"/>
         </choice>
         <ref name="standard-attributes"/>
      </element>
   </define>

   <define name="result-document">
      <element name="result-document">
         <ann:documentation>Creates a secondary result.</ann:documentation>
         <oneOrMore>
            <choice>
               <attribute name="href">
                  <ann:documentation>The relative or absolute URI to send the result to.</ann:documentation>
                  <choice>
                     <ref name="uri"/>
                     <ref name="avt-expr"/>
                  </choice>
               </attribute>
               <attribute name="output">
                  <ann:documentation>A stream or writer to output to.</ann:documentation>
                  <ref name="expression">
                     <docs:expression-type name="System.IO.Stream"/>
                     <docs:expression-type name="System.IO.TextWriter"/>
                     <docs:expression-type name="System.Xml.XmlWriter"/>
                     <docs:expression-type name="Xcst.XcstWriter"/>
                  </ref>
               </attribute>
            </choice>
         </oneOrMore>
         <ref name="output-avt-attributes"/>
         <ref name="standard-attributes"/>
         <ref name="sequence-constructor"/>
      </element>
   </define>

   <define name="return">
      <element name="return">
         <ann:documentation>Exits from a template or function.</ann:documentation>
         <choice>
            <attribute name="value">
               <ann:documentation>A value to return.</ann:documentation>
               <ref name="expression"/>
            </attribute>
            <ref name="sequence-constructor"/>
         </choice>
         <ref name="standard-attributes"/>
      </element>
   </define>

   <define name="script">
      <element name="script">
         <ann:documentation>Embeds or references a script of code.</ann:documentation>
         <ref name="standard-attributes"/>
         <choice>
            <attribute name="src">
               <ann:documentation>The relative or absolute URI of the script of code.</ann:documentation>
               <ref name="uri"/>
            </attribute>
            <text/>
         </choice>
      </element>
   </define>

   <define name="serialize">
      <element name="serialize">
         <ann:documentation>Creates a string representation of its contents.</ann:documentation>
         <ref name="output-avt-attributes"/>
         <ref name="standard-attributes"/>
         <ref name="sequence-constructor"/>
      </element>
   </define>

   <define name="set">
      <element name="set">
         <ann:documentation>Assigns a value to a variable or object member.</ann:documentation>
         <attribute name="ref">
            <ann:documentation>The reference to set.</ann:documentation>
            <ref name="unary_expression"/>
         </attribute>
         <choice>
            <attribute name="value">
               <ann:documentation>The value to assign.</ann:documentation>
               <ref name="expression"/>
            </attribute>
            <ref name="sequence-constructor"/>
         </choice>
         <optional>
            <attribute name="as">
               <ann:documentation>The type of the value.</ann:documentation>
               <ref name="type_name"/>
            </attribute>
         </optional>
         <ref name="standard-attributes"/>
      </element>
   </define>

   <define name="sort">
      <element name="sort">
         <ann:documentation>Defines how to sort sequences of items.</ann:documentation>
         <zeroOrMore>
            <choice>
               <attribute name="by">
                  <ann:documentation>A lambda expression that computes the sorting key.</ann:documentation>
                  <ref name="lambda_expression"/>
               </attribute>
               <attribute name="order">
                  <ann:documentation>Specifies the sort direction ("ascending" or "descending").</ann:documentation>
                  <choice>
                     <ref name="order"/>
                     <ref name="avt-expr"/>
                  </choice>
               </attribute>
            </choice>
         </zeroOrMore>
         <ref name="standard-attributes"/>
      </element>
   </define>

   <define name="switch">
      <element name="switch">
         <ann:documentation>Chooses between multiple alternatives for a given value.</ann:documentation>
         <attribute name="value">
            <ann:documentation>The value to match.</ann:documentation>
            <ref name="expression"/>
         </attribute>
         <ref name="standard-attributes"/>
         <oneOrMore>
            <ref name="when"/>
         </oneOrMore>
         <optional>
            <ref name="otherwise"/>
         </optional>
      </element>
   </define>

   <define name="text">
      <element name="text">
         <ann:documentation>Creates a text node or string.</ann:documentation>
         <optional>
            <attribute name="disable-output-escaping">
               <ann:documentation>Specifies whether to omit output escaping.</ann:documentation>
               <ref name="boolean"/>
            </attribute>
         </optional>
         <ref name="standard-attributes"/>
         <text/>
      </element>
   </define>

   <define name="try">
      <element name="try">
         <ann:documentation>Recovers from exceptions or defines unconditional behavior.</ann:documentation>
         <choice>
            <attribute name="value">
               <ann:documentation>A value to output.</ann:documentation>
               <ref name="expression"/>
            </attribute>
            <ref name="sequence-constructor"/>
         </choice>
         <optional>
            <attribute name="rollback-output">
               <ann:documentation>Specifies whether to discard the output when an exception occurs.</ann:documentation>
               <ref name="boolean"/>
            </attribute>
         </optional>
         <ref name="standard-attributes"/>
         <choice>
            <group>
               <oneOrMore>
                  <ref name="catch"/>
               </oneOrMore>
               <optional>
                  <ref name="finally"/>
               </optional>
            </group>
            <ref name="finally"/>
         </choice>
      </element>
   </define>

   <define name="value-of">
      <element name="value-of">
         <ann:documentation>Creates a text node or string.</ann:documentation>
         <choice>
            <attribute name="value">
               <ann:documentation>The content of the text node or string.</ann:documentation>
               <ref name="expression"/>
            </attribute>
            <ref name="sequence-constructor"/>
         </choice>
         <zeroOrMore>
            <choice>
               <attribute name="disable-output-escaping">
                  <ann:documentation>Specifies whether to omit output escaping.</ann:documentation>
                  <ref name="boolean"/>
               </attribute>
               <attribute name="separator">
                  <ann:documentation>A string to intersperse between items.</ann:documentation>
                  <ref name="avt"/>
               </attribute>
            </choice>
         </zeroOrMore>
         <ref name="standard-attributes"/>
      </element>
   </define>

   <define name="variable">
      <element name="variable">
         <ann:documentation>Defines a variable.</ann:documentation>
         <attribute name="name">
            <ann:documentation>The name of the variable.</ann:documentation>
            <ref name="identifier"/>
         </attribute>
         <choice>
            <attribute name="value">
               <ann:documentation>The initial value of the variable.</ann:documentation>
               <ref name="expression"/>
            </attribute>
            <ref name="sequence-constructor"/>
         </choice>
         <optional>
            <attribute name="as">
               <ann:documentation>The type of the variable.</ann:documentation>
               <ref name="type_name"/>
            </attribute>
         </optional>
         <ref name="visibility-attribute"/>
         <ref name="standard-attributes"/>
      </element>
   </define>

   <define name="void">
      <element name="void">
         <ann:documentation>Evaluates ignoring the result.</ann:documentation>
         <choice>
            <attribute name="value">
               <ann:documentation>The expression to evaluate.</ann:documentation>
               <ref name="statement_expression"/>
            </attribute>
            <ref name="sequence-constructor"/>
         </choice>
         <ref name="standard-attributes"/>
      </element>
   </define>

   <define name="when">
      <element name="when">
         <ann:documentation>Represents a choice in a c:choose or c:switch instruction.</ann:documentation>
         <attribute name="test">
            <ann:documentation>The condition to check for the current choice to be selected.</ann:documentation>
            <ref name="expression"/>
         </attribute>
         <choice>
            <attribute name="value">
               <ann:documentation>The value to output.</ann:documentation>
               <ref name="expression"/>
            </attribute>
            <ref name="sequence-constructor"/>
         </choice>
         <ref name="standard-attributes"/>
      </element>
   </define>

   <define name="while">
      <element name="while">
         <ann:documentation>Repeateadly evaluates instructions until a condition is not met.</ann:documentation>
         <attribute name="test">
            <ann:documentation>The condition for the loop to continue.</ann:documentation>
            <ref name="boolean_expression"/>
         </attribute>
         <ref name="standard-attributes"/>
         <ref name="sequence-constructor"/>
      </element>
   </define>

   <define name="with-param">
      <element name="with-param">
         <ann:documentation>Defines parameter arguments for a template or delegate.</ann:documentation>
         <attribute name="name">
            <ann:documentation>The name of the parameter.</ann:documentation>
            <ref name="identifier"/>
         </attribute>
         <choice>
            <attribute name="value">
               <ann:documentation>The value of the parameter.</ann:documentation>
               <ref name="expression"/>
            </attribute>
            <ref name="sequence-constructor"/>
         </choice>
         <zeroOrMore>
            <choice>
               <attribute name="as">
                  <ann:documentation>The type of the parameter.</ann:documentation>
                  <ref name="type_name"/>
               </attribute>
               <attribute name="tunnel">
                  <ann:documentation>Specifies if the parameter should be tunneled.</ann:documentation>
                  <ref name="boolean"/>
               </attribute>
            </choice>
         </zeroOrMore>
         <ref name="standard-attributes"/>
      </element>
   </define>

   <define name="output-avt-attributes">
      <zeroOrMore>
         <choice>
            <attribute name="format">
               <ann:documentation>The name of the output definition to get serialization parameters from.</ann:documentation>
               <choice>
                  <ref name="eqname"/>
                  <ref name="avt-expr"/>
               </choice>
            </attribute>
            <attribute name="method">
               <ann:documentation>Specifies the output format.</ann:documentation>
               <choice>
                  <ref name="method"/>
                  <ref name="avt-expr"/>
               </choice>
            </attribute>
            <attribute name="byte-order-mark">
               <ann:documentation>Specifies whether a byte order mark is written at the start of the file.</ann:documentation>
               <choice>
                  <ref name="boolean"/>
                  <ref name="avt-expr"/>
               </choice>
            </attribute>
            <attribute name="cdata-section-elements">
               <ann:documentation>Specifies elements whose child text nodes should be wrapped in a CDATA section.</ann:documentation>
               <choice>
                  <ref name="cdata-section-elements"/>
                  <ref name="avt-expr"/>
               </choice>
            </attribute>
            <attribute name="doctype-public">
               <ann:documentation>Specifies a public document type declaration.</ann:documentation>
               <ref name="avt"/>
            </attribute>
            <attribute name="doctype-system">
               <ann:documentation>Specifies a system document type declaration.</ann:documentation>
               <ref name="avt"/>
            </attribute>
            <attribute name="encoding">
               <ann:documentation>Specifies the output encoding.</ann:documentation>
               <ref name="avt"/>
            </attribute>
            <attribute name="escape-uri-attributes">
               <ann:documentation>Specifies whether to escape URI attributes in HTML documents.</ann:documentation>
               <choice>
                  <ref name="boolean"/>
                  <ref name="avt-expr"/>
               </choice>
            </attribute>
            <!--
            <attribute name="html-version">
               <ann:documentation>Specifies the HTML version.</ann:documentation>
               <choice>
                  <ref name="decimal"/>
                  <ref name="avt-expr"/>
               </choice>
            </attribute>
            <attribute name="include-content-type">
               <ann:documentation>Specifies whether to include a meta element in the head of HTML documents, specifying the used character encoding.</ann:documentation>
               <choice>
                  <ref name="boolean"/>
                  <ref name="avt-expr"/>
               </choice>
            </attribute>
            -->
            <attribute name="indent">
               <ann:documentation>Specifies whether to indent the output.</ann:documentation>
               <choice>
                  <ref name="boolean"/>
                  <ref name="avt-expr"/>
               </choice>
            </attribute>
            <attribute name="indent-spaces">
               <ann:documentation>The number of spaces to use for indenting.</ann:documentation>
               <choice>
                  <ref name="integer"/>
                  <ref name="avt-expr"/>
               </choice>
            </attribute>
            <attribute name="item-separator">
               <ann:documentation>A string to intersperse between items.</ann:documentation>
               <ref name="avt"/>
            </attribute>
            <attribute name="media-type">
               <ann:documentation>The media type (MIME content type) of the output, to include in a meta element in the head of HTML documents.</ann:documentation>
               <ref name="avt"/>
            </attribute>
            <attribute name="omit-xml-declaration">
               <ann:documentation>Specifies whether to omit the XML declaration.</ann:documentation>
               <choice>
                  <ref name="boolean"/>
                  <ref name="avt-expr"/>
               </choice>
            </attribute>
            <attribute name="standalone">
               <ann:documentation>Specifies whether to include the standalone document declaration.</ann:documentation>
               <choice>
                  <ref name="standalone"/>
                  <ref name="avt-expr"/>
               </choice>
            </attribute>
            <!--
            <attribute name="suppress-indentation">
               <ann:documentation>Specifies elements that should not be indented.</ann:documentation>
               <choice>
                  <ref name="suppress-indentation"/>
                  <ref name="avt-expr"/>
               </choice>
            </attribute>
            <attribute name="undeclare-prefixes">
               <ann:documentation>Specifies whether to undeclare namespaces when outputting XML 1.1.</ann:documentation>
               <choice>
                  <ref name="boolean"/>
                  <ref name="avt-expr"/>
               </choice>
            </attribute>
            -->
            <attribute name="output-version">
               <ann:documentation>The version of the output format.</ann:documentation>
               <choice>
                  <ref name="output-version"/>
                  <ref name="avt-expr"/>
               </choice>
            </attribute>
            <attribute name="skip-character-check">
               <ann:documentation>Specifies whether to skip character checking that ensures the output does not contain any illegal characters.</ann:documentation>
               <choice>
                  <ref name="boolean"/>
                  <ref name="avt-expr"/>
               </choice>
            </attribute>
         </choice>
      </zeroOrMore>
   </define>


   <!-- ## Data Types -->

   <define name="string">
      <data type="string"/>
   </define>

   <define name="decimal">
      <data type="decimal">
         <param name="minInclusive">-79228162514264337593543950335</param>
         <param name="maxInclusive">79228162514264337593543950335</param>
      </data>
   </define>

   <define name="integer">
      <data type="int"/>
   </define>

   <define name="boolean" docs:display-type="true">
      <ann:documentation>One of the values "yes", "no", "true", "false", "1" or "0".</ann:documentation>
      <choice>
         <value>yes</value>
         <value>no</value>
         <value>true</value>
         <value>false</value>
         <value>1</value>
         <value>0</value>
      </choice>
   </define>

   <define name="qname">
      <ann:documentation>A qualified name. Unprefixed names are in the null namespace.</ann:documentation>
      <data type="Name">
         <param name="pattern">([^:\{\}]+:)?[^:\{\}]+</param>
      </data>
   </define>

   <define name="eqname" docs:display-type="true">
      <ann:documentation>An expanded qualified name. Unprefixed qualified names are in the null namespace.</ann:documentation>
      <choice>
         <ref name="qname"/>
         <ref name="uqname"/>
      </choice>
   </define>

   <define name="uqname">
      <data type="Name">
         <param name="pattern">Q\{[^\{\}]*\}([^:\{\}]+:)?[^:\{\}]+</param>
      </data>
   </define>

   <define name="ncname">
      <data type="NCName"/>
   </define>

   <define name="uri">
      <data type="anyURI"/>
   </define>

   <define name="nmtoken">
      <data type="NMTOKEN"/>
   </define>

   <define name="avt">
      <ann:documentation>Attribute value template.</ann:documentation>
      <ref name="string"/>
   </define>

   <define name="avt-expr">
      <ann:documentation>Attribute value template.</ann:documentation>
      <data type="string">
         <param name="pattern">.*\{.+\}.*</param>
      </data>
   </define>


   <!-- ## Attributes -->

   <define name="version">
      <ref name="decimal"/>
   </define>

   <define name="language">
      <data type="token">
         <param name="minLength">1</param>
      </data>
   </define>

   <define name="package-visibility">
      <ann:documentation>One of the values "internal" or "public".</ann:documentation>
      <choice>
         <value>internal</value>
         <value>public</value>
      </choice>
   </define>

   <define name="transform-text">
      <ann:documentation>One of the values "none", "normalize-space" or "trim".</ann:documentation>
      <choice>
         <value>none</value>
         <value>normalize-space</value>
         <value>trim</value>
      </choice>
   </define>

   <define name="extension-element-prefixes">
      <ann:documentation>A list of space separated namespace prefixes. Use "#default" to refer to the default namespace.</ann:documentation>
      <list>
         <zeroOrMore>
            <choice>
               <ref name="ncname"/>
               <value>#default</value>
            </choice>
         </zeroOrMore>
      </list>
   </define>

   <define name="use-attribute-sets">
      <ann:documentation>A list of space separated eqnames.</ann:documentation>
      <list>
         <zeroOrMore>
            <ref name="eqname"/>
         </zeroOrMore>
      </list>
   </define>

   <define name="visibility">
      <ann:documentation>One of the values "public", "private", "final" or "abstract".</ann:documentation>
      <choice>
         <ref name="visibility-except-abstract"/>
         <value>abstract</value>
      </choice>
   </define>

   <define name="visibility-except-abstract">
      <ann:documentation>One of the values "public", "private" or "final".</ann:documentation>
      <choice>
         <value>public</value>
         <value>private</value>
         <value>final</value>
      </choice>
   </define>

   <define name="order">
      <ann:documentation>One of the values "ascending" or "descending".</ann:documentation>
      <choice>
         <value>ascending</value>
         <value>descending</value>
      </choice>
   </define>

   <define name="method">
      <ann:documentation>One of the values "xml", "html", "text", or an eqname that must not be in the null namespace.</ann:documentation>
      <choice>
         <value>xml</value>
         <value>html</value>
         <value>text</value>
         <ref name="eqname"/>
      </choice>
   </define>

   <define name="output-version">
      <ann:documentation>The version of the output method format (usually "1.0" for XML and "5.0" for HTML).</ann:documentation>
      <ref name="nmtoken"/>
   </define>

   <define name="standalone">
      <ann:documentation>One of the values "yes", "no", "true", "false", "1", "0", or "omit".</ann:documentation>
      <choice>
         <ref name="boolean"/>
         <value>omit</value>
      </choice>
   </define>

   <define name="cdata-section-elements">
      <ann:documentation>A list of space separated eqnames. Unprefixed qualified names are in the default namespace.</ann:documentation>
      <list>
         <zeroOrMore>
            <ref name="eqname"/>
         </zeroOrMore>
      </list>
   </define>

   <!--
   <define name="suppress-indentation">
      <ann:documentation>A list of space separated eqnames. Unprefixed qualified names are in the default namespace.</ann:documentation>
      <list>
         <zeroOrMore>
            <ref name="eqname"/>
         </zeroOrMore>
      </list>
   </define>
   -->


   <!-- ## Expressions -->

   <define name="expression">
      <ann:documentation>Expression.</ann:documentation>
      <data type="string">
         <param name="minLength">1</param>
      </data>
   </define>

   <define name="identifier">
      <ann:documentation>Identifier.</ann:documentation>
      <data type="token">
         <param name="minLength">1</param>
      </data>
   </define>

   <define name="type_name">
      <ann:documentation>Type name.</ann:documentation>
      <data type="token">
         <param name="minLength">1</param>
      </data>
   </define>

   <define name="namespace_name">
      <ann:documentation>Namespace name.</ann:documentation>
      <data type="token">
         <param name="minLength">1</param>
      </data>
   </define>

   <define name="boolean_expression" docs:display-type="true">
      <ann:documentation>Boolean expression.</ann:documentation>
      <ref name="expression"/>
   </define>

   <define name="lambda_expression" docs:display-type="true">
      <ann:documentation>Lambda expression.</ann:documentation>
      <ref name="expression"/>
   </define>

   <define name="statement_expression" docs:display-type="true">
      <ann:documentation>Statement expression.</ann:documentation>
      <ref name="expression"/>
   </define>

   <define name="unary_expression" docs:display-type="true">
      <ann:documentation>Unary expression.</ann:documentation>
      <ref name="expression"/>
   </define>

   <define name="pattern" docs:display-type="true">
      <ann:documentation>Pattern expression.</ann:documentation>
      <ref name="expression"/>
   </define>

   <define name="expr-obj-dict">
      <ann:documentation>Expression.</ann:documentation>
      <ref name="expression">
         <docs:expression-type name="System.Object"/>
         <docs:expression-type name="System.Collections.Generic.IDictionary" topic="s4ys34ea">
            <docs:type-param name="System.String"/>
            <docs:type-param name="System.Object"/>
         </docs:expression-type>
      </ref>
   </define>

</grammar>
