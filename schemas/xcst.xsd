<?xml version="1.0" encoding="UTF-8"?>
<!-- Converted from Relax NG schema, using Trang. Use only with code completion tools that do not support Relax NG. -->
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:c="http://maxtoroq.github.io/XCST" elementFormDefault="qualified" targetNamespace="http://maxtoroq.github.io/XCST">
   <xs:group name="declaration">
      <xs:choice>
         <xs:element ref="c:attribute-set"/>
         <xs:element ref="c:function"/>
         <xs:element ref="c:import"/>
         <xs:element ref="c:mode"/>
         <xs:element ref="c:output"/>
         <xs:element ref="c:param"/>
         <xs:element ref="c:template"/>
         <xs:element ref="c:type"/>
         <xs:element ref="c:use-package"/>
         <xs:element ref="c:validation"/>
         <xs:element ref="c:variable"/>
      </xs:choice>
   </xs:group>
   <xs:group name="instruction">
      <xs:choice>
         <xs:element ref="c:apply-templates"/>
         <xs:element ref="c:array"/>
         <xs:element ref="c:assert"/>
         <xs:element ref="c:attribute"/>
         <xs:element ref="c:break"/>
         <xs:element ref="c:call-template"/>
         <xs:element ref="c:choose"/>
         <xs:element ref="c:comment"/>
         <xs:element ref="c:continue"/>
         <xs:element ref="c:copy-of"/>
         <xs:element ref="c:delegate"/>
         <xs:element ref="c:document"/>
         <xs:element ref="c:element"/>
         <xs:element ref="c:invoke-delegate"/>
         <xs:element ref="c:invoke-package"/>
         <xs:element ref="c:fallback"/>
         <xs:element ref="c:for-each"/>
         <xs:element ref="c:for-each-group"/>
         <xs:element ref="c:if"/>
         <xs:element ref="c:map"/>
         <xs:element ref="c:map-entry"/>
         <xs:element ref="c:message"/>
         <xs:element ref="c:namespace"/>
         <xs:element ref="c:next-match"/>
         <xs:element ref="c:next-template"/>
         <xs:element ref="c:object"/>
         <xs:element ref="c:processing-instruction"/>
         <xs:element ref="c:result-document"/>
         <xs:element ref="c:return"/>
         <xs:element ref="c:script"/>
         <xs:element ref="c:serialize"/>
         <xs:element ref="c:set"/>
         <xs:element ref="c:switch"/>
         <xs:element ref="c:text"/>
         <xs:element ref="c:try"/>
         <xs:element ref="c:value-of"/>
         <xs:element ref="c:variable"/>
         <xs:element ref="c:void"/>
         <xs:element ref="c:while"/>
      </xs:choice>
   </xs:group>
   <xs:attributeGroup name="standard-attributes">
      <xs:attribute name="expand-text" type="c:boolean">
         <xs:annotation>
            <xs:documentation>Enables or disables text value templates for descendant text nodes.</xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="extension-element-prefixes" type="c:extension-element-prefixes">
         <xs:annotation>
            <xs:documentation>Designates namespaces as extension namespaces.</xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="transform-text" type="c:transform-text">
         <xs:annotation>
            <xs:documentation>Enables or disables text normalization for descendant text nodes.</xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attributeGroup ref="c:extension-attributes"/>
   </xs:attributeGroup>
   <xs:attributeGroup name="extension-attributes">
      <xs:anyAttribute namespace="##other" processContents="skip"/>
   </xs:attributeGroup>
   <xs:group name="literal-result-element">
      <xs:choice>
         <xs:any namespace="##other" processContents="lax"/>
         <xs:any namespace="##local" processContents="lax"/>
      </xs:choice>
   </xs:group>
   <xs:attributeGroup name="literal-result-element-attributes">
      <xs:attribute name="expand-text" form="qualified" type="c:boolean"/>
      <xs:attribute name="extension-element-prefixes" form="qualified" type="c:extension-element-prefixes"/>
      <xs:attribute name="transform-text" form="qualified" type="c:transform-text"/>
      <xs:attribute name="use-attribute-sets" form="qualified" type="c:use-attribute-sets"/>
      <xs:anyAttribute processContents="skip"/>
   </xs:attributeGroup>
   <xs:group name="sequence-constructor">
      <xs:sequence>
         <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:group ref="c:instruction"/>
            <xs:group ref="c:literal-result-element"/>
         </xs:choice>
         <xs:element minOccurs="0" ref="c:on-empty"/>
      </xs:sequence>
   </xs:group>
   <xs:attributeGroup name="visibility-attribute">
      <xs:attribute name="visibility" type="c:visibility">
         <xs:annotation>
            <xs:documentation>Specifies how the current component can be used in other (using) packages.</xs:documentation>
         </xs:annotation>
      </xs:attribute>
   </xs:attributeGroup>
   <xs:group name="user-defined-data-element">
      <xs:sequence>
         <xs:any namespace="##other" processContents="lax"/>
      </xs:sequence>
   </xs:group>
   <xs:group name="any-nodes">
      <xs:sequence>
         <xs:any minOccurs="0" maxOccurs="unbounded" processContents="lax"/>
      </xs:sequence>
   </xs:group>
   <xs:attributeGroup name="any-nodes">
      <xs:anyAttribute processContents="skip"/>
   </xs:attributeGroup>
   <xs:element name="module" type="c:module-content">
      <xs:annotation>
         <xs:documentation>Represents an XCST module.</xs:documentation>
      </xs:annotation>
   </xs:element>
   <xs:element name="package">
      <xs:annotation>
         <xs:documentation>Represents an XCST package.</xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:complexContent>
            <xs:extension base="c:module-content">
               <xs:attribute name="name" type="c:type_name">
                  <xs:annotation>
                     <xs:documentation>The fully-qualified class name for the current package.</xs:documentation>
                  </xs:annotation>
               </xs:attribute>
               <xs:attribute name="visibility" type="c:package-visibility">
                  <xs:annotation>
                     <xs:documentation>Specifies how the current package can be used from other assemblies.</xs:documentation>
                  </xs:annotation>
               </xs:attribute>
            </xs:extension>
         </xs:complexContent>
      </xs:complexType>
   </xs:element>
   <xs:complexType name="module-content">
      <xs:sequence>
         <xs:element minOccurs="0" maxOccurs="unbounded" ref="c:import-namespace"/>
         <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:group ref="c:declaration"/>
            <xs:group ref="c:user-defined-data-element"/>
         </xs:choice>
      </xs:sequence>
      <xs:attribute name="version" use="required" type="c:version">
         <xs:annotation>
            <xs:documentation>The XCST version for the current and descendant elements (usually "1.0").</xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="language" use="required" type="c:language">
         <xs:annotation>
            <xs:documentation>The expression language for this module (usually "C#" or "VisualBasic").</xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="default-mode" type="c:eqname">
         <xs:annotation>
            <xs:documentation>The default mode of template rules for the current module.</xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attributeGroup ref="c:standard-attributes"/>
   </xs:complexType>
   <xs:element name="import-namespace">
      <xs:annotation>
         <xs:documentation>Imports a namespace.</xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:attribute name="ns" use="required" type="c:namespace_name">
            <xs:annotation>
               <xs:documentation>The namespace to import.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="alias" type="c:identifier">
            <xs:annotation>
               <xs:documentation>An alias for the namespace.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attributeGroup ref="c:standard-attributes"/>
      </xs:complexType>
   </xs:element>
   <xs:element name="use-package">
      <xs:annotation>
         <xs:documentation>Specifies a package dependency.</xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="c:accept"/>
            <xs:element ref="c:override"/>
         </xs:choice>
         <xs:attribute name="name" use="required" type="c:type_name">
            <xs:annotation>
               <xs:documentation>The class name of the package to use. Must be a fully-qualified name when using from implicit or unnamed packages.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attributeGroup ref="c:standard-attributes"/>
      </xs:complexType>
   </xs:element>
   <xs:element name="accept">
      <xs:annotation>
         <xs:documentation>Specifies component dependencies.</xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:attribute name="component" use="required">
            <xs:annotation>
               <xs:documentation>The type of component to accept.</xs:documentation>
            </xs:annotation>
            <xs:simpleType>
               <xs:restriction base="xs:token">
                  <xs:enumeration value="attribute-set"/>
                  <xs:enumeration value="function"/>
                  <xs:enumeration value="mode"/>
                  <xs:enumeration value="template"/>
                  <xs:enumeration value="type"/>
                  <xs:enumeration value="variable"/>
               </xs:restriction>
            </xs:simpleType>
         </xs:attribute>
         <xs:attribute name="names" use="required">
            <xs:annotation>
               <xs:documentation>A list of space separated component names, or "*" to accept all. Unprefixed qualified names are in the null namespace.</xs:documentation>
            </xs:annotation>
            <xs:simpleType>
               <xs:union>
                  <xs:simpleType>
                     <xs:list itemType="xs:token"/>
                  </xs:simpleType>
                  <xs:simpleType>
                     <xs:restriction base="xs:token">
                        <xs:enumeration value="*"/>
                     </xs:restriction>
                  </xs:simpleType>
               </xs:union>
            </xs:simpleType>
         </xs:attribute>
         <xs:attributeGroup ref="c:standard-attributes"/>
      </xs:complexType>
   </xs:element>
   <xs:element name="override">
      <xs:annotation>
         <xs:documentation>Container element for overriding components.</xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="c:template"/>
            <xs:element ref="c:function"/>
            <xs:element ref="c:variable"/>
            <xs:element ref="c:param"/>
            <xs:element ref="c:attribute-set"/>
         </xs:choice>
         <xs:attributeGroup ref="c:standard-attributes"/>
      </xs:complexType>
   </xs:element>
   <xs:element name="import">
      <xs:annotation>
         <xs:documentation>Specifies a module dependency.</xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:attribute name="href" use="required" type="c:uri">
            <xs:annotation>
               <xs:documentation>The relative or absolute URI of the module to import.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attributeGroup ref="c:standard-attributes"/>
      </xs:complexType>
   </xs:element>
   <xs:element name="template">
      <xs:annotation>
         <xs:documentation>Defines a named template or template rule.</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:sequence>
            <xs:element minOccurs="0" maxOccurs="unbounded" ref="c:param"/>
            <xs:group ref="c:sequence-constructor"/>
         </xs:sequence>
         <xs:attribute name="name" type="c:eqname">
            <xs:annotation>
               <xs:documentation>The name of the template.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attributeGroup ref="c:visibility-attribute"/>
         <xs:attribute name="match" type="c:pattern">
            <xs:annotation>
               <xs:documentation>A pattern expression.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="mode">
            <xs:annotation>
               <xs:documentation>A space separated list of either eqname or "#default"; or "#all". Unprefixed qualified names are in the null namespace.</xs:documentation>
            </xs:annotation>
            <xs:simpleType>
               <xs:union>
                  <xs:simpleType>
                     <xs:restriction base="xs:token">
                        <xs:enumeration value="#all"/>
                     </xs:restriction>
                  </xs:simpleType>
                  <xs:simpleType>
                     <xs:restriction>
                        <xs:simpleType>
                           <xs:list>
                              <xs:simpleType>
                                 <xs:union memberTypes="c:eqname">
                                    <xs:simpleType>
                                       <xs:restriction base="xs:token">
                                          <xs:enumeration value="#default"/>
                                       </xs:restriction>
                                    </xs:simpleType>
                                 </xs:union>
                              </xs:simpleType>
                           </xs:list>
                        </xs:simpleType>
                        <xs:minLength value="1"/>
                     </xs:restriction>
                  </xs:simpleType>
               </xs:union>
            </xs:simpleType>
         </xs:attribute>
         <xs:attribute name="as" type="c:type_name">
            <xs:annotation>
               <xs:documentation>The return type.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attributeGroup ref="c:standard-attributes"/>
      </xs:complexType>
   </xs:element>
   <xs:element name="function">
      <xs:annotation>
         <xs:documentation>Defines a function.</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:sequence>
            <xs:element minOccurs="0" maxOccurs="unbounded" ref="c:param"/>
            <xs:group ref="c:sequence-constructor"/>
         </xs:sequence>
         <xs:attribute name="name" use="required" type="c:identifier">
            <xs:annotation>
               <xs:documentation>The name of the function.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="as" type="c:type_name">
            <xs:annotation>
               <xs:documentation>The return type. Omit this attribute for void functions.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attributeGroup ref="c:visibility-attribute"/>
         <xs:attributeGroup ref="c:standard-attributes"/>
      </xs:complexType>
   </xs:element>
   <xs:element name="param">
      <xs:annotation>
         <xs:documentation>Defines a package, template, function or delegate parameter.</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:group minOccurs="0" ref="c:sequence-constructor"/>
         <xs:attribute name="name" use="required" type="c:identifier">
            <xs:annotation>
               <xs:documentation>The name of the parameter.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="value" type="c:expression">
            <xs:annotation>
               <xs:documentation>The default value of the parameter. Expression.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="as" type="c:type_name">
            <xs:annotation>
               <xs:documentation>The type of the parameter.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="required" type="c:boolean">
            <xs:annotation>
               <xs:documentation>Specifies if the parameter is required.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="tunnel" type="c:boolean">
            <xs:annotation>
               <xs:documentation>Specifies if the parameter is a tunnel parameter.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attributeGroup ref="c:standard-attributes"/>
      </xs:complexType>
   </xs:element>
   <xs:element name="attribute-set">
      <xs:annotation>
         <xs:documentation>Defines an attribute set.</xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:sequence>
            <xs:element minOccurs="0" maxOccurs="unbounded" ref="c:attribute"/>
         </xs:sequence>
         <xs:attribute name="name" use="required" type="c:eqname">
            <xs:annotation>
               <xs:documentation>The name of the attribute set.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="use-attribute-sets" type="c:use-attribute-sets">
            <xs:annotation>
               <xs:documentation>Specifies other attribute sets to use before the current one.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attributeGroup ref="c:visibility-attribute"/>
         <xs:attributeGroup ref="c:standard-attributes"/>
      </xs:complexType>
   </xs:element>
   <xs:element name="mode">
      <xs:annotation>
         <xs:documentation>Defines an explicit mode.</xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:attribute name="name" type="c:eqname">
            <xs:annotation>
               <xs:documentation>The name of the mode.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="on-no-match">
            <xs:annotation>
               <xs:documentation>Specifies the behavior when an item does not match any of the available template rules. The default is shallow-copy.</xs:documentation>
            </xs:annotation>
            <xs:simpleType>
               <xs:restriction base="xs:token">
                  <xs:enumeration value="deep-copy"/>
                  <xs:enumeration value="shallow-copy"/>
                  <xs:enumeration value="deep-skip"/>
                  <xs:enumeration value="shallow-skip"/>
                  <xs:enumeration value="text-only-copy"/>
                  <xs:enumeration value="fail"/>
               </xs:restriction>
            </xs:simpleType>
         </xs:attribute>
         <xs:attribute name="visibility" type="c:visibility-except-abstract">
            <xs:annotation>
               <xs:documentation>Specifies how the current component can be used in other (using) packages.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attributeGroup ref="c:standard-attributes"/>
      </xs:complexType>
   </xs:element>
   <xs:element name="type">
      <xs:annotation>
         <xs:documentation>Defines a type.</xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:sequence>
            <xs:element minOccurs="0" maxOccurs="unbounded" ref="c:meta"/>
            <xs:element minOccurs="0" maxOccurs="unbounded" ref="c:member"/>
         </xs:sequence>
         <xs:attribute name="name" use="required" type="c:identifier">
            <xs:annotation>
               <xs:documentation>The name of the type.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="visibility" type="c:visibility-except-abstract">
            <xs:annotation>
               <xs:documentation>Specifies how the current component can be used in other (using) packages.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attributeGroup ref="c:type-or-member-attributes"/>
         <xs:attribute name="resource-type" type="c:type_name">
            <xs:annotation>
               <xs:documentation>A type that contains resources for description, display-name, edit-hint, group and short-name attributes.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attributeGroup ref="c:validation-or-type-attributes"/>
         <xs:attributeGroup ref="c:standard-attributes"/>
      </xs:complexType>
   </xs:element>
   <xs:element name="member">
      <xs:annotation>
         <xs:documentation>Defines a type member.</xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:sequence>
            <xs:element minOccurs="0" maxOccurs="unbounded" ref="c:meta"/>
            <xs:element minOccurs="0" maxOccurs="unbounded" ref="c:member"/>
         </xs:sequence>
         <xs:attribute name="name" use="required" type="c:identifier">
            <xs:annotation>
               <xs:documentation>The name of the member.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="as" type="c:type_name">
            <xs:annotation>
               <xs:documentation>The type of the member.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="value" type="c:expression">
            <xs:annotation>
               <xs:documentation>An initial value for this member. Expression.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="expression" type="c:expression">
            <xs:annotation>
               <xs:documentation>An expression for computed members. Expression.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="auto-initialize" type="c:boolean">
            <xs:annotation>
               <xs:documentation>Auto-assign an initial value to this member.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="display">
            <xs:annotation>
               <xs:documentation>Specifies if this member should be displayed in a UI.</xs:documentation>
            </xs:annotation>
            <xs:simpleType>
               <xs:union memberTypes="c:boolean">
                  <xs:simpleType>
                     <xs:restriction base="xs:token">
                        <xs:enumeration value="view-only">
                           <xs:annotation>
                              <xs:documentation>Indicates that this member should only be displayed in a viewing UI.</xs:documentation>
                           </xs:annotation>
                        </xs:enumeration>
                     </xs:restriction>
                  </xs:simpleType>
                  <xs:simpleType>
                     <xs:restriction base="xs:token">
                        <xs:enumeration value="edit-only">
                           <xs:annotation>
                              <xs:documentation>Indicates that this member should only be displayed in an editing UI.</xs:documentation>
                           </xs:annotation>
                        </xs:enumeration>
                     </xs:restriction>
                  </xs:simpleType>
                  <xs:simpleType>
                     <xs:restriction base="xs:token">
                        <xs:enumeration value="hidden">
                           <xs:annotation>
                              <xs:documentation>Indicates that this member should only be displayed in an editing UI as a hidden field.</xs:documentation>
                           </xs:annotation>
                        </xs:enumeration>
                     </xs:restriction>
                  </xs:simpleType>
               </xs:union>
            </xs:simpleType>
         </xs:attribute>
         <xs:attribute name="display-name" type="c:string">
            <xs:annotation>
               <xs:documentation>A name suitable for UI.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="description" type="c:string">
            <xs:annotation>
               <xs:documentation>A description of this member suitable for UI.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="short-name" type="c:string">
            <xs:annotation>
               <xs:documentation>A shorter name suitable for UI where the display name would be too long to fit (e.g. a table column).</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="edit-hint" type="c:string">
            <xs:annotation>
               <xs:documentation>A hint to the user of what can be entered in a control for this member.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="order" type="c:integer">
            <xs:annotation>
               <xs:documentation>A number that indicates the relative position of this member in a UI.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="group" type="c:string">
            <xs:annotation>
               <xs:documentation>A name that is used to group members in a UI.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="format" type="c:string">
            <xs:annotation>
               <xs:documentation>A formatting string that specifies the display format for the value of this member.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="apply-format-in-edit-mode" type="c:boolean">
            <xs:annotation>
               <xs:documentation>Specifies if the display format should be used in an edit control for this member.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="disable-output-escaping" type="c:boolean">
            <xs:annotation>
               <xs:documentation>Specifies if this member should not be escaped when displaying in a UI (e.g. HTML content).</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="null-text" type="c:string">
            <xs:annotation>
               <xs:documentation>A text that is displayed for this member when the value is null.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="data-type">
            <xs:annotation>
               <xs:documentation>A more specific type. Using this attribute can be a way to provide default values to the 'format' and 'template' attributes, and for using a specific input type in HTML.</xs:documentation>
            </xs:annotation>
            <xs:simpleType>
               <xs:restriction base="xs:token">
                  <xs:enumeration value="CreditCard"/>
                  <xs:enumeration value="Currency"/>
                  <xs:enumeration value="Date"/>
                  <xs:enumeration value="DateTime"/>
                  <xs:enumeration value="Duration"/>
                  <xs:enumeration value="EmailAddress"/>
                  <xs:enumeration value="Html"/>
                  <xs:enumeration value="ImageUrl"/>
                  <xs:enumeration value="MultilineText"/>
                  <xs:enumeration value="Password"/>
                  <xs:enumeration value="PhoneNumber"/>
                  <xs:enumeration value="PostalCode"/>
                  <xs:enumeration value="Text"/>
                  <xs:enumeration value="Time"/>
                  <xs:enumeration value="Upload"/>
                  <xs:enumeration value="Url"/>
               </xs:restriction>
            </xs:simpleType>
         </xs:attribute>
         <xs:attribute name="template" type="c:string">
            <xs:annotation>
               <xs:documentation>The name of a template to use when displaying this member in a UI.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="required" type="c:boolean">
            <xs:annotation>
               <xs:documentation>Specifies if this member is required.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="max-length" type="c:integer">
            <xs:annotation>
               <xs:documentation>A maximum valid length for this member.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="min-length" type="c:integer">
            <xs:annotation>
               <xs:documentation>A minimum valid length for this member.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="pattern" type="c:string">
            <xs:annotation>
               <xs:documentation>A regular expression that a valid value for this member must conform to.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="min" type="c:string">
            <xs:annotation>
               <xs:documentation>A minimum valid value for this member.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="max" type="c:string">
            <xs:annotation>
               <xs:documentation>A maximum valid value for this member.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="equal-to" type="c:identifier">
            <xs:annotation>
               <xs:documentation>The name of another member that a valid value for this member should be equal to.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="serialize" type="c:boolean">
            <xs:annotation>
               <xs:documentation>Specifies if this member should be considered when serializing an instance of the type.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attributeGroup ref="c:type-or-member-attributes"/>
         <xs:attributeGroup ref="c:validation-or-member-attributes"/>
         <xs:attributeGroup ref="c:standard-attributes"/>
      </xs:complexType>
   </xs:element>
   <xs:element name="meta">
      <xs:annotation>
         <xs:documentation>Defines type or member custom metadata.</xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:attribute name="type" use="required" type="c:type_name">
            <xs:annotation>
               <xs:documentation>The metadata type.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="args" type="c:expression">
            <xs:annotation>
               <xs:documentation>The metadata arguments. Expression.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attributeGroup ref="c:standard-attributes"/>
      </xs:complexType>
   </xs:element>
   <xs:attributeGroup name="type-or-member-attributes">
      <xs:attribute name="allow-empty-string" type="c:boolean">
         <xs:annotation>
            <xs:documentation>Specifies if an empty string is a valid value for this member.</xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="text-member" type="c:identifier">
         <xs:annotation>
            <xs:documentation>The name of the member to use as the text representation for this type.</xs:documentation>
         </xs:annotation>
      </xs:attribute>
   </xs:attributeGroup>
   <xs:element name="output">
      <xs:annotation>
         <xs:documentation>Defines serialization parameters.</xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:attribute name="name" type="c:eqname">
            <xs:annotation>
               <xs:documentation>The name of the output definition.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="method" type="c:method">
            <xs:annotation>
               <xs:documentation>Specifies the output format.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="byte-order-mark" type="c:boolean">
            <xs:annotation>
               <xs:documentation>Specifies whether a byte order mark is written at the start of the file.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="cdata-section-elements" type="c:cdata-section-elements">
            <xs:annotation>
               <xs:documentation>Specifies elements whose child text nodes should be wrapped in a CDATA section.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="doctype-public" type="c:string">
            <xs:annotation>
               <xs:documentation>Specifies a public document type declaration.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="doctype-system" type="c:string">
            <xs:annotation>
               <xs:documentation>Specifies a system document type declaration.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="encoding" type="c:string">
            <xs:annotation>
               <xs:documentation>Specifies the output encoding.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="escape-uri-attributes" type="c:boolean">
            <xs:annotation>
               <xs:documentation>Specifies whether to escape URI attributes in HTML documents.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="indent" type="c:boolean">
            <xs:annotation>
               <xs:documentation>Specifies whether to indent the output.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="indent-spaces" type="c:integer">
            <xs:annotation>
               <xs:documentation>The number of spaces to use for indenting.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="item-separator" type="c:string">
            <xs:annotation>
               <xs:documentation>A string to intersperse between items.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="media-type" type="c:string">
            <xs:annotation>
               <xs:documentation>The media type (MIME content type) of the output, to include in a meta element in the head of HTML documents.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="omit-xml-declaration" type="c:boolean">
            <xs:annotation>
               <xs:documentation>Specifies whether to omit the XML declaration.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="standalone" type="c:standalone">
            <xs:annotation>
               <xs:documentation>Specifies whether to include the standalone document declaration.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="version" type="c:output-version">
            <xs:annotation>
               <xs:documentation>The version of the output format.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="skip-character-check" type="c:boolean">
            <xs:annotation>
               <xs:documentation>Specifies whether to skip character checking that ensures the output does not contain any illegal characters.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attributeGroup ref="c:standard-attributes"/>
      </xs:complexType>
   </xs:element>
   <xs:element name="validation">
      <xs:annotation>
         <xs:documentation>Defines default values for validation messages.</xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:attributeGroup ref="c:validation-or-member-attributes"/>
         <xs:attributeGroup ref="c:validation-or-type-attributes"/>
         <xs:attributeGroup ref="c:standard-attributes"/>
      </xs:complexType>
   </xs:element>
   <xs:attributeGroup name="validation-or-type-attributes">
      <xs:attribute name="validation-resource-type" type="c:type_name">
         <xs:annotation>
            <xs:documentation>A type that contains error message resources for validation attributes.</xs:documentation>
         </xs:annotation>
      </xs:attribute>
   </xs:attributeGroup>
   <xs:attributeGroup name="validation-or-member-attributes">
      <xs:attribute name="required-message" type="c:string">
         <xs:annotation>
            <xs:documentation>An error message for the required attribute.</xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="min-length-message" type="c:string">
         <xs:annotation>
            <xs:documentation>An error message for the min-length attribute.</xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="max-length-message" type="c:string">
         <xs:annotation>
            <xs:documentation>An error message for the max-length attribute.</xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="pattern-message" type="c:string">
         <xs:annotation>
            <xs:documentation>An error message for the pattern attribute.</xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="range-message" type="c:string">
         <xs:annotation>
            <xs:documentation>An error message for the min and max attributes.</xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="equal-to-message" type="c:string">
         <xs:annotation>
            <xs:documentation>An error message for the equal-to attribute.</xs:documentation>
         </xs:annotation>
      </xs:attribute>
   </xs:attributeGroup>
   <!-- ## Instructions -->
   <xs:element name="apply-templates">
      <xs:complexType>
         <xs:sequence>
            <xs:element minOccurs="0" maxOccurs="unbounded" ref="c:with-param"/>
         </xs:sequence>
         <xs:attribute name="value" use="required" type="c:expression">
            <xs:annotation>
               <xs:documentation>The value to process. Expression.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="mode">
            <xs:annotation>
               <xs:documentation>An eqname or "#current" or "#default". Unprefixed qualified names are in the null namespace.</xs:documentation>
            </xs:annotation>
            <xs:simpleType>
               <xs:union memberTypes="c:eqname">
                  <xs:simpleType>
                     <xs:restriction base="xs:token">
                        <xs:enumeration value="#current"/>
                     </xs:restriction>
                  </xs:simpleType>
                  <xs:simpleType>
                     <xs:restriction base="xs:token">
                        <xs:enumeration value="#default"/>
                     </xs:restriction>
                  </xs:simpleType>
               </xs:union>
            </xs:simpleType>
         </xs:attribute>
         <xs:attribute name="with-params" type="c:expr-obj-dict">
            <xs:annotation>
               <xs:documentation>An object with parameters. Expression (System.Object | System.Collections.Generic.IDictionary&lt;System.String, System.Object&gt;).</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="tunnel-params" type="c:expr-obj-dict">
            <xs:annotation>
               <xs:documentation>An object with tunnel parameters. Expression (System.Object | System.Collections.Generic.IDictionary&lt;System.String, System.Object&gt;).</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="separator" type="c:avt">
            <xs:annotation>
               <xs:documentation>A string to intersperse between the results of each processed item.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attributeGroup ref="c:standard-attributes"/>
      </xs:complexType>
   </xs:element>
   <xs:element name="array">
      <xs:annotation>
         <xs:documentation>Creates an array.</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:group ref="c:sequence-constructor"/>
         <xs:attributeGroup ref="c:standard-attributes"/>
      </xs:complexType>
   </xs:element>
   <xs:element name="assert">
      <xs:annotation>
         <xs:documentation>Checks for a condition and signals a message if the condition is false.</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:group minOccurs="0" ref="c:sequence-constructor"/>
         <xs:attribute name="test" use="required" type="c:expression">
            <xs:annotation>
               <xs:documentation>The condition to check for. Expression (System.Boolean).</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="value" type="c:expression">
            <xs:annotation>
               <xs:documentation>A message to signal. Expression.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attributeGroup ref="c:standard-attributes"/>
      </xs:complexType>
   </xs:element>
   <xs:element name="attribute">
      <xs:annotation>
         <xs:documentation>Creates an attribute node.</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:group minOccurs="0" ref="c:sequence-constructor"/>
         <xs:attribute name="name" use="required">
            <xs:annotation>
               <xs:documentation>The name of the attribute. Attribute value template (qname).</xs:documentation>
            </xs:annotation>
            <xs:simpleType>
               <xs:union memberTypes="c:qname c:avt-expr"/>
            </xs:simpleType>
         </xs:attribute>
         <xs:attribute name="value" type="c:expression">
            <xs:annotation>
               <xs:documentation>The value of the attribute. Expression.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="namespace">
            <xs:annotation>
               <xs:documentation>The namespace of the attribute. Attribute value template (uri).</xs:documentation>
            </xs:annotation>
            <xs:simpleType>
               <xs:union memberTypes="c:uri c:avt-expr"/>
            </xs:simpleType>
         </xs:attribute>
         <xs:attribute name="separator" type="c:avt">
            <xs:annotation>
               <xs:documentation>A string to intersperse between items.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attributeGroup ref="c:standard-attributes"/>
      </xs:complexType>
   </xs:element>
   <xs:element name="break">
      <xs:annotation>
         <xs:documentation>Exits from a loop.</xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:attributeGroup ref="c:standard-attributes"/>
      </xs:complexType>
   </xs:element>
   <xs:element name="call-template">
      <xs:annotation>
         <xs:documentation>Invokes a template.</xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:sequence>
            <xs:element minOccurs="0" maxOccurs="unbounded" ref="c:with-param"/>
         </xs:sequence>
         <xs:attribute name="name" use="required" type="c:eqname">
            <xs:annotation>
               <xs:documentation>The name of the template to invoke.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="tunnel-params" type="c:expr-obj-dict">
            <xs:annotation>
               <xs:documentation>An object with tunnel parameters. Expression (System.Object | System.Collections.Generic.IDictionary&lt;System.String, System.Object&gt;).</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attributeGroup ref="c:standard-attributes"/>
      </xs:complexType>
   </xs:element>
   <xs:element name="catch">
      <xs:annotation>
         <xs:documentation>Catches an exception.</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:group minOccurs="0" ref="c:sequence-constructor"/>
         <xs:attribute name="exception" type="c:expression">
            <xs:annotation>
               <xs:documentation>The exception to catch. Expression.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="when" type="c:expression">
            <xs:annotation>
               <xs:documentation>An exception filter. Expression.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="value" type="c:expression">
            <xs:annotation>
               <xs:documentation>A value to output. Expression.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attributeGroup ref="c:standard-attributes"/>
      </xs:complexType>
   </xs:element>
   <xs:element name="choose">
      <xs:annotation>
         <xs:documentation>Chooses between multiple alternatives.</xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:sequence>
            <xs:element maxOccurs="unbounded" ref="c:when"/>
            <xs:element minOccurs="0" ref="c:otherwise"/>
         </xs:sequence>
         <xs:attributeGroup ref="c:standard-attributes"/>
      </xs:complexType>
   </xs:element>
   <xs:element name="comment">
      <xs:annotation>
         <xs:documentation>Creates a comment node.</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:group minOccurs="0" ref="c:sequence-constructor"/>
         <xs:attribute name="value" type="c:expression">
            <xs:annotation>
               <xs:documentation>The comment. Expression.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attributeGroup ref="c:standard-attributes"/>
      </xs:complexType>
   </xs:element>
   <xs:element name="continue">
      <xs:annotation>
         <xs:documentation>Interrupts the current loop iteration and advances to the next.</xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:attributeGroup ref="c:standard-attributes"/>
      </xs:complexType>
   </xs:element>
   <xs:element name="copy-of">
      <xs:annotation>
         <xs:documentation>Creates a deep copy of nodes.</xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:attribute name="value" use="required" type="c:expression">
            <xs:annotation>
               <xs:documentation>The nodes to copy. Expression.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attributeGroup ref="c:standard-attributes"/>
      </xs:complexType>
   </xs:element>
   <xs:element name="delegate">
      <xs:annotation>
         <xs:documentation>Creates a template delegate.</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:sequence>
            <xs:element minOccurs="0" maxOccurs="unbounded" ref="c:param"/>
            <xs:group ref="c:sequence-constructor"/>
         </xs:sequence>
         <xs:attribute name="as" type="c:type_name">
            <xs:annotation>
               <xs:documentation>The return type.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attributeGroup ref="c:standard-attributes"/>
      </xs:complexType>
   </xs:element>
   <xs:element name="document">
      <xs:annotation>
         <xs:documentation>Creates a temporary tree.</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:group ref="c:sequence-constructor"/>
         <xs:attributeGroup ref="c:standard-attributes"/>
      </xs:complexType>
   </xs:element>
   <xs:element name="element">
      <xs:annotation>
         <xs:documentation>Creates an element node.</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:group ref="c:sequence-constructor"/>
         <xs:attribute name="name" use="required">
            <xs:annotation>
               <xs:documentation>The name of the element. Attribute value template (qname).</xs:documentation>
            </xs:annotation>
            <xs:simpleType>
               <xs:union memberTypes="c:qname c:avt-expr"/>
            </xs:simpleType>
         </xs:attribute>
         <xs:attribute name="namespace">
            <xs:annotation>
               <xs:documentation>The namespace of the element. Attribute value template (uri).</xs:documentation>
            </xs:annotation>
            <xs:simpleType>
               <xs:union memberTypes="c:uri c:avt-expr"/>
            </xs:simpleType>
         </xs:attribute>
         <xs:attribute name="use-attribute-sets" type="c:use-attribute-sets">
            <xs:annotation>
               <xs:documentation>Specifies attribute sets to use on the element.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attributeGroup ref="c:standard-attributes"/>
      </xs:complexType>
   </xs:element>
   <xs:element name="invoke-delegate">
      <xs:annotation>
         <xs:documentation>Invokes a template delegate.</xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:sequence>
            <xs:element minOccurs="0" maxOccurs="unbounded" ref="c:with-param"/>
         </xs:sequence>
         <xs:attribute name="delegate" use="required" type="c:expression">
            <xs:annotation>
               <xs:documentation>The template delegate instance. Expression (Xcst.XcstDelegate&lt;TItem&gt;).</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="with-params" type="c:expr-obj-dict">
            <xs:annotation>
               <xs:documentation>An object with parameters. Expression (System.Object | System.Collections.Generic.IDictionary&lt;System.String, System.Object&gt;).</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="tunnel-params" type="c:expr-obj-dict">
            <xs:annotation>
               <xs:documentation>An object with tunnel parameters. Expression (System.Object | System.Collections.Generic.IDictionary&lt;System.String, System.Object&gt;).</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attributeGroup ref="c:standard-attributes"/>
      </xs:complexType>
   </xs:element>
   <xs:element name="invoke-package">
      <xs:annotation>
         <xs:documentation>Invokes a dynamically loaded package.</xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:attribute name="package" use="required" type="c:expression">
            <xs:annotation>
               <xs:documentation>The package instance. Expression.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="package-params" type="c:expr-obj-dict">
            <xs:annotation>
               <xs:documentation>An object with package parameters. Expression (System.Object | System.Collections.Generic.IDictionary&lt;System.String, System.Object&gt;).</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="initial-template">
            <xs:annotation>
               <xs:documentation>The name of the initial template. Attribute value template (eqname).</xs:documentation>
            </xs:annotation>
            <xs:simpleType>
               <xs:union memberTypes="c:eqname c:avt-expr"/>
            </xs:simpleType>
         </xs:attribute>
         <xs:attribute name="initial-mode">
            <xs:annotation>
               <xs:documentation>The name of the initial mode. Attribute value template (eqname).</xs:documentation>
            </xs:annotation>
            <xs:simpleType>
               <xs:union memberTypes="c:eqname c:avt-expr"/>
            </xs:simpleType>
         </xs:attribute>
         <xs:attribute name="initial-match-selection" type="c:expression">
            <xs:annotation>
               <xs:documentation>The value of the initial match selection. Expression.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="template-params" type="c:expr-obj-dict">
            <xs:annotation>
               <xs:documentation>An object with template parameters. Expression (System.Object | System.Collections.Generic.IDictionary&lt;System.String, System.Object&gt;).</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="tunnel-params" type="c:expr-obj-dict">
            <xs:annotation>
               <xs:documentation>An object with tunnel parameters. Expression (System.Object | System.Collections.Generic.IDictionary&lt;System.String, System.Object&gt;).</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="tunnel-passthru">
            <xs:annotation>
               <xs:documentation>Specifies whether to pass the current tunnel parameters. Attribute value template (boolean).</xs:documentation>
            </xs:annotation>
            <xs:simpleType>
               <xs:union memberTypes="c:boolean c:avt-expr"/>
            </xs:simpleType>
         </xs:attribute>
         <xs:attribute name="base-output-uri">
            <xs:annotation>
               <xs:documentation>The base output URI, used to resolve relative URIs of secondary result documents. Attribute value template (uri).</xs:documentation>
            </xs:annotation>
            <xs:simpleType>
               <xs:union memberTypes="c:uri c:avt-expr"/>
            </xs:simpleType>
         </xs:attribute>
         <xs:attribute name="base-uri">
            <xs:annotation>
               <xs:documentation>The base URI, used to resolve relative URIs. Attribute value template (uri).</xs:documentation>
            </xs:annotation>
            <xs:simpleType>
               <xs:union memberTypes="c:uri c:avt-expr"/>
            </xs:simpleType>
         </xs:attribute>
         <xs:attributeGroup ref="c:standard-attributes"/>
      </xs:complexType>
   </xs:element>
   <xs:element name="fallback">
      <xs:annotation>
         <xs:documentation>Defines fallback behavior for the parent element.</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:group ref="c:sequence-constructor"/>
         <xs:attributeGroup ref="c:standard-attributes"/>
      </xs:complexType>
   </xs:element>
   <xs:element name="finally">
      <xs:annotation>
         <xs:documentation>Defines unconditional behavior for the c:try instruction.</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:group minOccurs="0" ref="c:sequence-constructor"/>
         <xs:attribute name="value" type="c:expression">
            <xs:annotation>
               <xs:documentation>A value to output. Expression.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attributeGroup ref="c:standard-attributes"/>
      </xs:complexType>
   </xs:element>
   <xs:element name="for-each">
      <xs:annotation>
         <xs:documentation>Processes each item in a sequence of items.</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:sequence>
            <xs:element minOccurs="0" maxOccurs="unbounded" ref="c:sort"/>
            <xs:group ref="c:sequence-constructor"/>
         </xs:sequence>
         <xs:attribute name="name" use="required" type="c:identifier">
            <xs:annotation>
               <xs:documentation>The name of the item.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="in" use="required" type="c:expression">
            <xs:annotation>
               <xs:documentation>The source of the items. Expression.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="separator" type="c:avt">
            <xs:annotation>
               <xs:documentation>A string to intersperse between the results of each processed item.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attributeGroup ref="c:standard-attributes"/>
      </xs:complexType>
   </xs:element>
   <xs:element name="for-each-group">
      <xs:annotation>
         <xs:documentation>Processes a sequence of items in groups.</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:sequence>
            <xs:element minOccurs="0" maxOccurs="unbounded" ref="c:sort"/>
            <xs:group ref="c:sequence-constructor"/>
         </xs:sequence>
         <xs:attribute name="name" use="required" type="c:identifier">
            <xs:annotation>
               <xs:documentation>The name of the group.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="in" use="required" type="c:expression">
            <xs:annotation>
               <xs:documentation>The source of the items. Expression (System.Collections.Generic.IEnumerable&lt;T&gt; | System.Collections.IEnumerable).</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="group-by" type="c:lambda_expression">
            <xs:annotation>
               <xs:documentation>A lambda expression that computes the grouping key.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="group-size">
            <xs:annotation>
               <xs:documentation>The maximum number of items a group may have. Attribute value template (integer).</xs:documentation>
            </xs:annotation>
            <xs:simpleType>
               <xs:union memberTypes="c:integer c:avt-expr"/>
            </xs:simpleType>
         </xs:attribute>
         <xs:attributeGroup ref="c:standard-attributes"/>
      </xs:complexType>
   </xs:element>
   <xs:element name="if">
      <xs:annotation>
         <xs:documentation>Defines conditional behavior.</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:group ref="c:sequence-constructor"/>
         <xs:attribute name="test" use="required" type="c:boolean_expression">
            <xs:annotation>
               <xs:documentation>The condition to check for the contents to be processed.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attributeGroup ref="c:standard-attributes"/>
      </xs:complexType>
   </xs:element>
   <xs:element name="map">
      <xs:annotation>
         <xs:documentation>Creates an expando object.</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:group ref="c:sequence-constructor"/>
         <xs:attributeGroup ref="c:standard-attributes"/>
      </xs:complexType>
   </xs:element>
   <xs:element name="map-entry">
      <xs:annotation>
         <xs:documentation>Creates a map entry.</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:group minOccurs="0" ref="c:sequence-constructor"/>
         <xs:attribute name="key" use="required" type="c:expression">
            <xs:annotation>
               <xs:documentation>The key of the entry. Expression.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="value" type="c:expression">
            <xs:annotation>
               <xs:documentation>The value of the entry. Expression.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attributeGroup ref="c:standard-attributes"/>
      </xs:complexType>
   </xs:element>
   <xs:element name="message">
      <xs:annotation>
         <xs:documentation>Signals a message.</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:group minOccurs="0" ref="c:sequence-constructor"/>
         <xs:attribute name="value" type="c:expression">
            <xs:annotation>
               <xs:documentation>The message. Expression.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="terminate">
            <xs:annotation>
               <xs:documentation>Specifies whether to stop the execution of the program. Attribute value template (boolean).</xs:documentation>
            </xs:annotation>
            <xs:simpleType>
               <xs:union memberTypes="c:boolean c:avt-expr"/>
            </xs:simpleType>
         </xs:attribute>
         <xs:attribute name="error-code">
            <xs:annotation>
               <xs:documentation>An error code associated with the message. Attribute value template (eqname).</xs:documentation>
            </xs:annotation>
            <xs:simpleType>
               <xs:union memberTypes="c:eqname c:avt-expr"/>
            </xs:simpleType>
         </xs:attribute>
         <xs:attribute name="error-data" type="c:expression">
            <xs:annotation>
               <xs:documentation>An arbitrary object used to convey additional information about the error. Expression.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attributeGroup ref="c:standard-attributes"/>
      </xs:complexType>
   </xs:element>
   <xs:element name="namespace">
      <xs:annotation>
         <xs:documentation>Creates a namespace node.</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:group minOccurs="0" ref="c:sequence-constructor"/>
         <xs:attribute name="name" use="required">
            <xs:annotation>
               <xs:documentation>The namespace prefix. Attribute value template (ncname).</xs:documentation>
            </xs:annotation>
            <xs:simpleType>
               <xs:union memberTypes="c:ncname c:avt-expr"/>
            </xs:simpleType>
         </xs:attribute>
         <xs:attribute name="value" type="c:expression">
            <xs:annotation>
               <xs:documentation>The namespace URI. Expression.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attributeGroup ref="c:standard-attributes"/>
      </xs:complexType>
   </xs:element>
   <xs:element name="next-match">
      <xs:annotation>
         <xs:documentation>Invokes the next template rule that matches the current input.</xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:sequence>
            <xs:element minOccurs="0" maxOccurs="unbounded" ref="c:with-param"/>
         </xs:sequence>
         <xs:attribute name="with-params" type="c:expr-obj-dict">
            <xs:annotation>
               <xs:documentation>An object with parameters. Expression (System.Object | System.Collections.Generic.IDictionary&lt;System.String, System.Object&gt;).</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="tunnel-params" type="c:expr-obj-dict">
            <xs:annotation>
               <xs:documentation>An object with tunnel parameters. Expression (System.Object | System.Collections.Generic.IDictionary&lt;System.String, System.Object&gt;).</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attributeGroup ref="c:standard-attributes"/>
      </xs:complexType>
   </xs:element>
   <xs:element name="next-template">
      <xs:annotation>
         <xs:documentation>Invokes the hidden template.</xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:sequence>
            <xs:element minOccurs="0" maxOccurs="unbounded" ref="c:with-param"/>
         </xs:sequence>
         <xs:attribute name="tunnel-params" type="c:expr-obj-dict">
            <xs:annotation>
               <xs:documentation>An object with tunnel parameters. Expression (System.Object | System.Collections.Generic.IDictionary&lt;System.String, System.Object&gt;).</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attributeGroup ref="c:standard-attributes"/>
      </xs:complexType>
   </xs:element>
   <xs:element name="object">
      <xs:annotation>
         <xs:documentation>Appends a value to the current output.</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:attribute name="value" type="c:expression">
            <xs:annotation>
               <xs:documentation>The value to output. Expression.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attributeGroup ref="c:standard-attributes"/>
      </xs:complexType>
   </xs:element>
   <xs:element name="on-empty">
      <xs:annotation>
         <xs:documentation>Evaluates only if the current sequence constructor has not appended any items so far.</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:group minOccurs="0" ref="c:sequence-constructor"/>
         <xs:attribute name="value" type="c:expression">
            <xs:annotation>
               <xs:documentation>The value to output. Expression.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attributeGroup ref="c:standard-attributes"/>
      </xs:complexType>
   </xs:element>
   <xs:element name="otherwise">
      <xs:annotation>
         <xs:documentation>Represents a fallback in a c:choose or c:switch instruction in case no other choice is selected.</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:group minOccurs="0" ref="c:sequence-constructor"/>
         <xs:attribute name="value" type="c:expression">
            <xs:annotation>
               <xs:documentation>The value to output. Expression.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attributeGroup ref="c:standard-attributes"/>
      </xs:complexType>
   </xs:element>
   <xs:element name="processing-instruction">
      <xs:annotation>
         <xs:documentation>Creates a processing instruction node.</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:group minOccurs="0" ref="c:sequence-constructor"/>
         <xs:attribute name="name" use="required">
            <xs:annotation>
               <xs:documentation>The name of the processing instruction. Attribute value template (ncname).</xs:documentation>
            </xs:annotation>
            <xs:simpleType>
               <xs:union memberTypes="c:ncname c:avt-expr"/>
            </xs:simpleType>
         </xs:attribute>
         <xs:attribute name="value" type="c:expression">
            <xs:annotation>
               <xs:documentation>The processing instruction content. Expression.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attributeGroup ref="c:standard-attributes"/>
      </xs:complexType>
   </xs:element>
   <xs:element name="result-document">
      <xs:annotation>
         <xs:documentation>Creates a secondary result.</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:group ref="c:sequence-constructor"/>
         <xs:attribute name="href">
            <xs:annotation>
               <xs:documentation>The relative or absolute URI to send the result to. Attribute value template (uri).</xs:documentation>
            </xs:annotation>
            <xs:simpleType>
               <xs:union memberTypes="c:uri c:avt-expr"/>
            </xs:simpleType>
         </xs:attribute>
         <xs:attribute name="output" type="c:expression">
            <xs:annotation>
               <xs:documentation>A stream or writer to output to. Expression (System.IO.Stream | System.IO.TextWriter | System.Xml.XmlWriter | Xcst.XcstWriter).</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attributeGroup ref="c:output-avt-attributes"/>
         <xs:attributeGroup ref="c:standard-attributes"/>
      </xs:complexType>
   </xs:element>
   <xs:element name="return">
      <xs:annotation>
         <xs:documentation>Exits from a template or function.</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:group minOccurs="0" ref="c:sequence-constructor"/>
         <xs:attribute name="value" type="c:expression">
            <xs:annotation>
               <xs:documentation>A value to return. Expression.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attributeGroup ref="c:standard-attributes"/>
      </xs:complexType>
   </xs:element>
   <xs:element name="script">
      <xs:annotation>
         <xs:documentation>Embeds or references a script of code.</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:attributeGroup ref="c:standard-attributes"/>
         <xs:attribute name="src" type="c:uri">
            <xs:annotation>
               <xs:documentation>The relative or absolute URI of the script of code.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>
   <xs:element name="serialize">
      <xs:annotation>
         <xs:documentation>Creates a string representation of its contents.</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:group ref="c:sequence-constructor"/>
         <xs:attributeGroup ref="c:output-avt-attributes"/>
         <xs:attributeGroup ref="c:standard-attributes"/>
      </xs:complexType>
   </xs:element>
   <xs:element name="set">
      <xs:annotation>
         <xs:documentation>Assigns a value to a variable or object member.</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:group minOccurs="0" ref="c:sequence-constructor"/>
         <xs:attribute name="ref" use="required" type="c:unary_expression">
            <xs:annotation>
               <xs:documentation>The reference to set. Unary expression.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="value" type="c:expression">
            <xs:annotation>
               <xs:documentation>The value to assign. Expression.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="as" type="c:type_name">
            <xs:annotation>
               <xs:documentation>The type of the value.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attributeGroup ref="c:standard-attributes"/>
      </xs:complexType>
   </xs:element>
   <xs:element name="sort">
      <xs:annotation>
         <xs:documentation>Defines how to sort sequences of items.</xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:attribute name="by" type="c:lambda_expression">
            <xs:annotation>
               <xs:documentation>A lambda expression that computes the sorting key.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="order">
            <xs:annotation>
               <xs:documentation>Specifies the sort direction ("ascending" or "descending"). Attribute value template.</xs:documentation>
            </xs:annotation>
            <xs:simpleType>
               <xs:union memberTypes="c:order c:avt-expr"/>
            </xs:simpleType>
         </xs:attribute>
         <xs:attributeGroup ref="c:standard-attributes"/>
      </xs:complexType>
   </xs:element>
   <xs:element name="switch">
      <xs:annotation>
         <xs:documentation>Chooses between multiple alternatives for a given value.</xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:sequence>
            <xs:element maxOccurs="unbounded" ref="c:when"/>
            <xs:element minOccurs="0" ref="c:otherwise"/>
         </xs:sequence>
         <xs:attribute name="value" use="required" type="c:expression">
            <xs:annotation>
               <xs:documentation>The value to match. Expression.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attributeGroup ref="c:standard-attributes"/>
      </xs:complexType>
   </xs:element>
   <xs:element name="text">
      <xs:annotation>
         <xs:documentation>Creates a text node or string.</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:attribute name="disable-output-escaping" type="c:boolean">
            <xs:annotation>
               <xs:documentation>Specifies whether to omit output escaping.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attributeGroup ref="c:standard-attributes"/>
      </xs:complexType>
   </xs:element>
   <xs:element name="try">
      <xs:annotation>
         <xs:documentation>Recovers from exceptions or defines unconditional behavior.</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:sequence>
            <xs:group minOccurs="0" ref="c:sequence-constructor"/>
            <xs:choice>
               <xs:sequence>
                  <xs:element maxOccurs="unbounded" ref="c:catch"/>
                  <xs:element minOccurs="0" ref="c:finally"/>
               </xs:sequence>
               <xs:element ref="c:finally"/>
            </xs:choice>
         </xs:sequence>
         <xs:attribute name="value" type="c:expression">
            <xs:annotation>
               <xs:documentation>A value to output. Expression.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="rollback-output" type="c:boolean">
            <xs:annotation>
               <xs:documentation>Specifies whether to discard the output when an exception occurs.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attributeGroup ref="c:standard-attributes"/>
      </xs:complexType>
   </xs:element>
   <xs:element name="value-of">
      <xs:annotation>
         <xs:documentation>Creates a text node or string.</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:group minOccurs="0" ref="c:sequence-constructor"/>
         <xs:attribute name="value" type="c:expression">
            <xs:annotation>
               <xs:documentation>The content of the text node or string. Expression.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="disable-output-escaping" type="c:boolean">
            <xs:annotation>
               <xs:documentation>Specifies whether to omit output escaping.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="separator" type="c:avt">
            <xs:annotation>
               <xs:documentation>A string to intersperse between items.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attributeGroup ref="c:standard-attributes"/>
      </xs:complexType>
   </xs:element>
   <xs:element name="variable">
      <xs:annotation>
         <xs:documentation>Defines a variable.</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:group minOccurs="0" ref="c:sequence-constructor"/>
         <xs:attribute name="name" use="required" type="c:identifier">
            <xs:annotation>
               <xs:documentation>The name of the variable.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="value" type="c:expression">
            <xs:annotation>
               <xs:documentation>The initial value of the variable. Expression.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="as" type="c:type_name">
            <xs:annotation>
               <xs:documentation>The type of the variable.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attributeGroup ref="c:visibility-attribute"/>
         <xs:attributeGroup ref="c:standard-attributes"/>
      </xs:complexType>
   </xs:element>
   <xs:element name="void">
      <xs:annotation>
         <xs:documentation>Evaluates ignoring the result.</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:group minOccurs="0" ref="c:sequence-constructor"/>
         <xs:attribute name="value" type="c:statement_expression">
            <xs:annotation>
               <xs:documentation>The expression to evaluate. Statement expression.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attributeGroup ref="c:standard-attributes"/>
      </xs:complexType>
   </xs:element>
   <xs:element name="when">
      <xs:annotation>
         <xs:documentation>Represents a choice in a c:choose or c:switch instruction.</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:group minOccurs="0" ref="c:sequence-constructor"/>
         <xs:attribute name="test" use="required" type="c:expression">
            <xs:annotation>
               <xs:documentation>The condition to check for the current choice to be selected. Expression.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="value" type="c:expression">
            <xs:annotation>
               <xs:documentation>The value to output. Expression.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attributeGroup ref="c:standard-attributes"/>
      </xs:complexType>
   </xs:element>
   <xs:element name="while">
      <xs:annotation>
         <xs:documentation>Repeateadly evaluates instructions until a condition is not met.</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:group ref="c:sequence-constructor"/>
         <xs:attribute name="test" use="required" type="c:boolean_expression">
            <xs:annotation>
               <xs:documentation>The condition for the loop to continue.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attributeGroup ref="c:standard-attributes"/>
      </xs:complexType>
   </xs:element>
   <xs:element name="with-param">
      <xs:annotation>
         <xs:documentation>Defines parameter arguments for a template or delegate.</xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
         <xs:group minOccurs="0" ref="c:sequence-constructor"/>
         <xs:attribute name="name" use="required" type="c:identifier">
            <xs:annotation>
               <xs:documentation>The name of the parameter.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="value" type="c:expression">
            <xs:annotation>
               <xs:documentation>The value of the parameter. Expression.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="as" type="c:type_name">
            <xs:annotation>
               <xs:documentation>The type of the parameter.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="tunnel" type="c:boolean">
            <xs:annotation>
               <xs:documentation>Specifies if the parameter should be tunneled.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attributeGroup ref="c:standard-attributes"/>
      </xs:complexType>
   </xs:element>
   <xs:attributeGroup name="output-avt-attributes">
      <xs:attribute name="format">
         <xs:annotation>
            <xs:documentation>The name of the output definition to get serialization parameters from. Attribute value template (eqname).</xs:documentation>
         </xs:annotation>
         <xs:simpleType>
            <xs:union memberTypes="c:eqname c:avt-expr"/>
         </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="method">
         <xs:annotation>
            <xs:documentation>Specifies the output format. Attribute value template.</xs:documentation>
         </xs:annotation>
         <xs:simpleType>
            <xs:union memberTypes="c:method c:avt-expr"/>
         </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="byte-order-mark">
         <xs:annotation>
            <xs:documentation>Specifies whether a byte order mark is written at the start of the file. Attribute value template (boolean).</xs:documentation>
         </xs:annotation>
         <xs:simpleType>
            <xs:union memberTypes="c:boolean c:avt-expr"/>
         </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="cdata-section-elements">
         <xs:annotation>
            <xs:documentation>Specifies elements whose child text nodes should be wrapped in a CDATA section. Attribute value template.</xs:documentation>
         </xs:annotation>
         <xs:simpleType>
            <xs:union memberTypes="c:cdata-section-elements c:avt-expr"/>
         </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="doctype-public" type="c:avt">
         <xs:annotation>
            <xs:documentation>Specifies a public document type declaration.</xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="doctype-system" type="c:avt">
         <xs:annotation>
            <xs:documentation>Specifies a system document type declaration.</xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="encoding" type="c:avt">
         <xs:annotation>
            <xs:documentation>Specifies the output encoding.</xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="escape-uri-attributes">
         <xs:annotation>
            <xs:documentation>Specifies whether to escape URI attributes in HTML documents. Attribute value template (boolean).</xs:documentation>
         </xs:annotation>
         <xs:simpleType>
            <xs:union memberTypes="c:boolean c:avt-expr"/>
         </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="indent">
         <xs:annotation>
            <xs:documentation>Specifies whether to indent the output. Attribute value template (boolean).</xs:documentation>
         </xs:annotation>
         <xs:simpleType>
            <xs:union memberTypes="c:boolean c:avt-expr"/>
         </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="indent-spaces">
         <xs:annotation>
            <xs:documentation>The number of spaces to use for indenting. Attribute value template (integer).</xs:documentation>
         </xs:annotation>
         <xs:simpleType>
            <xs:union memberTypes="c:integer c:avt-expr"/>
         </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="item-separator" type="c:avt">
         <xs:annotation>
            <xs:documentation>A string to intersperse between items.</xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="media-type" type="c:avt">
         <xs:annotation>
            <xs:documentation>The media type (MIME content type) of the output, to include in a meta element in the head of HTML documents.</xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="omit-xml-declaration">
         <xs:annotation>
            <xs:documentation>Specifies whether to omit the XML declaration. Attribute value template (boolean).</xs:documentation>
         </xs:annotation>
         <xs:simpleType>
            <xs:union memberTypes="c:boolean c:avt-expr"/>
         </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="standalone">
         <xs:annotation>
            <xs:documentation>Specifies whether to include the standalone document declaration. Attribute value template.</xs:documentation>
         </xs:annotation>
         <xs:simpleType>
            <xs:union memberTypes="c:standalone c:avt-expr"/>
         </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="output-version">
         <xs:annotation>
            <xs:documentation>The version of the output format. Attribute value template.</xs:documentation>
         </xs:annotation>
         <xs:simpleType>
            <xs:union memberTypes="c:output-version c:avt-expr"/>
         </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="skip-character-check">
         <xs:annotation>
            <xs:documentation>Specifies whether to skip character checking that ensures the output does not contain any illegal characters. Attribute value template (boolean).</xs:documentation>
         </xs:annotation>
         <xs:simpleType>
            <xs:union memberTypes="c:boolean c:avt-expr"/>
         </xs:simpleType>
      </xs:attribute>
   </xs:attributeGroup>
   <!-- ## Data Types -->
   <xs:simpleType name="string">
      <xs:restriction base="xs:string"/>
   </xs:simpleType>
   <xs:simpleType name="decimal">
      <xs:restriction base="xs:decimal">
         <xs:minInclusive value="-79228162514264337593543950335"/>
         <xs:maxInclusive value="79228162514264337593543950335"/>
      </xs:restriction>
   </xs:simpleType>
   <xs:simpleType name="integer">
      <xs:restriction base="xs:int"/>
   </xs:simpleType>
   <xs:simpleType name="boolean">
      <xs:annotation>
         <xs:documentation>One of the values "yes", "no", "true", "false", "1" or "0".</xs:documentation>
      </xs:annotation>
      <xs:restriction base="xs:token">
         <xs:enumeration value="yes"/>
         <xs:enumeration value="no"/>
         <xs:enumeration value="true"/>
         <xs:enumeration value="false"/>
         <xs:enumeration value="1"/>
         <xs:enumeration value="0"/>
      </xs:restriction>
   </xs:simpleType>
   <xs:simpleType name="qname">
      <xs:annotation>
         <xs:documentation>A qualified name. Unprefixed names are in the null namespace.</xs:documentation>
      </xs:annotation>
      <xs:restriction base="xs:Name">
         <xs:pattern value="([^:\{\}]+:)?[^:\{\}]+"/>
      </xs:restriction>
   </xs:simpleType>
   <xs:simpleType name="eqname">
      <xs:annotation>
         <xs:documentation>An expanded qualified name. Unprefixed qualified names are in the null namespace.</xs:documentation>
      </xs:annotation>
      <xs:union memberTypes="c:qname c:uqname"/>
   </xs:simpleType>
   <xs:simpleType name="uqname">
      <xs:restriction base="xs:Name">
         <xs:pattern value="Q\{[^\{\}]*\}([^:\{\}]+:)?[^:\{\}]+"/>
      </xs:restriction>
   </xs:simpleType>
   <xs:simpleType name="ncname">
      <xs:restriction base="xs:NCName"/>
   </xs:simpleType>
   <xs:simpleType name="uri">
      <xs:restriction base="xs:anyURI"/>
   </xs:simpleType>
   <xs:simpleType name="nmtoken">
      <xs:restriction base="xs:NMTOKEN"/>
   </xs:simpleType>
   <xs:simpleType name="avt">
      <xs:annotation>
         <xs:documentation>Attribute value template.</xs:documentation>
      </xs:annotation>
      <xs:restriction base="c:string"/>
   </xs:simpleType>
   <xs:simpleType name="avt-expr">
      <xs:restriction base="xs:string">
         <xs:pattern value=".*\{.+\}.*"/>
      </xs:restriction>
   </xs:simpleType>
   <!-- ## Attributes -->
   <xs:simpleType name="version">
      <xs:restriction base="c:decimal"/>
   </xs:simpleType>
   <xs:simpleType name="language">
      <xs:restriction base="xs:token">
         <xs:minLength value="1"/>
      </xs:restriction>
   </xs:simpleType>
   <xs:simpleType name="package-visibility">
      <xs:annotation>
         <xs:documentation>One of the values "internal" or "public".</xs:documentation>
      </xs:annotation>
      <xs:restriction base="xs:token">
         <xs:enumeration value="internal"/>
         <xs:enumeration value="public"/>
      </xs:restriction>
   </xs:simpleType>
   <xs:simpleType name="transform-text">
      <xs:annotation>
         <xs:documentation>One of the values "none", "normalize-space" or "trim".</xs:documentation>
      </xs:annotation>
      <xs:restriction base="xs:token">
         <xs:enumeration value="none"/>
         <xs:enumeration value="normalize-space"/>
         <xs:enumeration value="trim"/>
      </xs:restriction>
   </xs:simpleType>
   <xs:simpleType name="extension-element-prefixes">
      <xs:annotation>
         <xs:documentation>A list of space separated namespace prefixes. Use "#default" to refer to the default namespace.</xs:documentation>
      </xs:annotation>
      <xs:list>
         <xs:simpleType>
            <xs:union memberTypes="c:ncname">
               <xs:simpleType>
                  <xs:restriction base="xs:token">
                     <xs:enumeration value="#default"/>
                  </xs:restriction>
               </xs:simpleType>
            </xs:union>
         </xs:simpleType>
      </xs:list>
   </xs:simpleType>
   <xs:simpleType name="use-attribute-sets">
      <xs:annotation>
         <xs:documentation>A list of space separated eqnames.</xs:documentation>
      </xs:annotation>
      <xs:list itemType="c:eqname"/>
   </xs:simpleType>
   <xs:simpleType name="visibility">
      <xs:annotation>
         <xs:documentation>One of the values "public", "private", "final" or "abstract".</xs:documentation>
      </xs:annotation>
      <xs:union memberTypes="c:visibility-except-abstract">
         <xs:simpleType>
            <xs:restriction base="xs:token">
               <xs:enumeration value="abstract"/>
            </xs:restriction>
         </xs:simpleType>
      </xs:union>
   </xs:simpleType>
   <xs:simpleType name="visibility-except-abstract">
      <xs:annotation>
         <xs:documentation>One of the values "public", "private" or "final".</xs:documentation>
      </xs:annotation>
      <xs:restriction base="xs:token">
         <xs:enumeration value="public"/>
         <xs:enumeration value="private"/>
         <xs:enumeration value="final"/>
      </xs:restriction>
   </xs:simpleType>
   <xs:simpleType name="order">
      <xs:annotation>
         <xs:documentation>One of the values "ascending" or "descending".</xs:documentation>
      </xs:annotation>
      <xs:restriction base="xs:token">
         <xs:enumeration value="ascending"/>
         <xs:enumeration value="descending"/>
      </xs:restriction>
   </xs:simpleType>
   <xs:simpleType name="method">
      <xs:annotation>
         <xs:documentation>One of the values "xml", "html", "text", or an eqname that must not be in the null namespace.</xs:documentation>
      </xs:annotation>
      <xs:union memberTypes="c:eqname">
         <xs:simpleType>
            <xs:restriction base="xs:token">
               <xs:enumeration value="xml"/>
            </xs:restriction>
         </xs:simpleType>
         <xs:simpleType>
            <xs:restriction base="xs:token">
               <xs:enumeration value="html"/>
            </xs:restriction>
         </xs:simpleType>
         <xs:simpleType>
            <xs:restriction base="xs:token">
               <xs:enumeration value="text"/>
            </xs:restriction>
         </xs:simpleType>
      </xs:union>
   </xs:simpleType>
   <xs:simpleType name="output-version">
      <xs:annotation>
         <xs:documentation>The version of the output method format (usually "1.0" for XML and "5.0" for HTML).</xs:documentation>
      </xs:annotation>
      <xs:restriction base="c:nmtoken"/>
   </xs:simpleType>
   <xs:simpleType name="standalone">
      <xs:annotation>
         <xs:documentation>One of the values "yes", "no", "true", "false", "1", "0", or "omit".</xs:documentation>
      </xs:annotation>
      <xs:union memberTypes="c:boolean">
         <xs:simpleType>
            <xs:restriction base="xs:token">
               <xs:enumeration value="omit"/>
            </xs:restriction>
         </xs:simpleType>
      </xs:union>
   </xs:simpleType>
   <xs:simpleType name="cdata-section-elements">
      <xs:annotation>
         <xs:documentation>A list of space separated eqnames. Unprefixed qualified names are in the default namespace.</xs:documentation>
      </xs:annotation>
      <xs:list itemType="c:eqname"/>
   </xs:simpleType>
   <!--
      <define name="suppress-indentation">
         <ann:documentation>A list of space separated eqnames. Unprefixed qualified names are in the default namespace.</ann:documentation>
         <list>
            <zeroOrMore>
               <ref name="eqname"/>
            </zeroOrMore>
         </list>
      </define>
   -->
   <!-- ## Expressions -->
   <xs:simpleType name="expression">
      <xs:restriction base="xs:string">
         <xs:minLength value="1"/>
      </xs:restriction>
   </xs:simpleType>
   <xs:simpleType name="identifier">
      <xs:annotation>
         <xs:documentation>Identifier.</xs:documentation>
      </xs:annotation>
      <xs:restriction base="xs:token">
         <xs:minLength value="1"/>
      </xs:restriction>
   </xs:simpleType>
   <xs:simpleType name="type_name">
      <xs:annotation>
         <xs:documentation>Type name.</xs:documentation>
      </xs:annotation>
      <xs:restriction base="xs:token">
         <xs:minLength value="1"/>
      </xs:restriction>
   </xs:simpleType>
   <xs:simpleType name="namespace_name">
      <xs:annotation>
         <xs:documentation>Namespace name.</xs:documentation>
      </xs:annotation>
      <xs:restriction base="xs:token">
         <xs:minLength value="1"/>
      </xs:restriction>
   </xs:simpleType>
   <xs:simpleType name="boolean_expression">
      <xs:annotation>
         <xs:documentation>Boolean expression.</xs:documentation>
      </xs:annotation>
      <xs:restriction base="c:expression"/>
   </xs:simpleType>
   <xs:simpleType name="lambda_expression">
      <xs:annotation>
         <xs:documentation>Lambda expression.</xs:documentation>
      </xs:annotation>
      <xs:restriction base="c:expression"/>
   </xs:simpleType>
   <xs:simpleType name="statement_expression">
      <xs:annotation>
         <xs:documentation>Statement expression.</xs:documentation>
      </xs:annotation>
      <xs:restriction base="c:expression"/>
   </xs:simpleType>
   <xs:simpleType name="unary_expression">
      <xs:annotation>
         <xs:documentation>Unary expression.</xs:documentation>
      </xs:annotation>
      <xs:restriction base="c:expression"/>
   </xs:simpleType>
   <xs:simpleType name="pattern">
      <xs:annotation>
         <xs:documentation>Pattern expression.</xs:documentation>
      </xs:annotation>
      <xs:restriction base="c:expression"/>
   </xs:simpleType>
   <xs:simpleType name="expr-obj-dict">
      <xs:annotation>
         <xs:documentation>Expression.</xs:documentation>
      </xs:annotation>
      <xs:restriction base="c:expression"/>
   </xs:simpleType>
</xs:schema>